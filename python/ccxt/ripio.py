# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.abstract.ripio import ImplicitAPI
from ccxt.base.types import OrderSide
from typing import Optional
from typing import List
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.errors import NullResponse
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import InvalidOrder
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import OrderNotFillable
from ccxt.base.errors import NetworkError
from ccxt.base.errors import DDoSProtection
from ccxt.base.errors import RateLimitExceeded
from ccxt.base.errors import OnMaintenance
from ccxt.base.errors import AuthenticationError
from ccxt.base.decimal_to_precision import TICK_SIZE
from ccxt.base.precise import Precise


class ripio(Exchange, ImplicitAPI):

    def describe(self):
        return self.deep_extend(super(ripio, self).describe(), {
            'id': 'ripio',
            'name': 'Ripio',
            'countries': ['AR', 'BR'],
            'rateLimit': 50,
            'version': 'v4',
            'pro': True,
            'has': {
                'CORS': False,
                'spot': True,
                'margin': False,
                'swap': False,
                'future': False,
                'option': False,
                'cancelOrder': True,
                'createOrder': True,
                'fetchBalance': True,
                'fetchCanceledOrders': True,
                'fetchClosedOrders': True,
                'fetchCurrencies': True,
                'fetchL2OrderBook': True,
                'fetchMarkets': True,
                'fetchMyTrades': True,
                'fetchOHLCV': False,
                'fetchOpenInterest': False,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrders': True,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTrades': True,
                'withdraw': True,
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1892491/179565296-42198bf8-2228-47d6-a1b5-fd763a163c9d.jpg',
                'api': {
                    'public': 'https://api.ripiotrade.co/v4/public',
                    'private': 'https://api.ripiotrade.co/v4',
                },
                'www': 'https://trade.ripio.com',
                'doc': [
                    'https://apidocs.ripiotrade.co/v4',
                ],
            },
            'api': {
                'public': {
                    'get': [
                        'tickers/',
                        'tickers/{pair}/',
                        'orders/level-3/',
                        'orders/level-2/',
                        'trades/',
                        'currencies/',
                        'pairs/',
                    ],
                },
                'private': {
                    'get': [
                        'book/summaries/',
                        'book/estimate-price/{pair}/',
                        'book/orders/level-3/',
                        'book/orders/level-2/',
                        'user/balances/',
                        'user/fees-and-limits/',
                        'user/statement/',
                        'user/statement/{currency_code}/',
                        'user/trades/',
                        'orders/',
                        'orders/open/',
                        'orders/{id}/',
                        'orders/by-external-id/{external_id}/',
                        'deposits/',
                        'withdrawals/',
                        'withdrawals/estimate-fee/{currency_code}/',
                        'wallets/is-internal/',
                        'wallets/balance/',
                        'wallets/balance/{date}/',
                    ],
                    'post': [
                        'orders/',
                        'withdrawals/',
                        'transactions/sync/',
                        'ticket/',
                    ],
                    'delete': [
                        'orders/',
                        'orders/by-external-id/',
                        'orders/all/',
                    ],
                },
            },
            'fees': {
                'trading': {
                    'tierBased': True,
                    'percentage': True,
                    'taker': 0.0 / 100,
                    'maker': 0.0 / 100,
                },
            },
            'precisionMode': TICK_SIZE,
            'requiredCredentials': {
                'apiKey': True,
                'secret': False,
            },
            'exceptions': {
                'exact': {
                    '400': InvalidOrder,
                    '401': PermissionDenied,
                    '402': AuthenticationError,
                    '403': PermissionDenied,
                    '404': NullResponse,
                    '405': ExchangeError,
                    '429': DDoSProtection,
                    '500': ExchangeError,
                    '502': NetworkError,
                    '503': OnMaintenance,
                },
                'broad': {
                    'You did another transaction with the same amount in an interval lower than 10(ten) minutes, it is not allowed in order to prevent mistakes. Try again in a few minutes': ExchangeError,
                    'Invalid order quantity': InvalidOrder,
                    'Funds insufficient': InsufficientFunds,
                    'Order already canceled': InvalidOrder,
                    'Order already completely executed': OrderNotFillable,
                    'No orders to cancel': OrderNotFound,
                    'Minimum value not reached': ExchangeError,
                    'Limit exceeded': DDoSProtection,
                    'Too many requests': RateLimitExceeded,
                },
            },
        })

    def fetch_markets(self, params={}):
        """
        retrieves data on all markets for ripio
        :param dict params: extra parameters specific to the exchange api endpoint
        :returns [dict]: an array of objects representing market data
        """
        response = self.publicGetPairs(params)
        #
        #     {
        #         "data": [
        #             {
        #                 "base": "ETH",
        #                 "base_name": "Ethereum",
        #                 "enabled": True,
        #                 "min_amount": 0.0024,
        #                 "min_value": 5,
        #                 "price_tick": 1,
        #                 "quote": "USDC",
        #                 "quote_name": "USD Coin",
        #                 "symbol": "ETH_USDC"
        #             },
        #         ],
        #         "message": null
        #     }
        #
        result = []
        results = self.safe_value(response, 'data', [])
        for i in range(0, len(results)):
            market = results[i]
            id = self.safe_string(market, 'symbol')
            baseId = self.safe_string(market, 'base')
            quoteId = self.safe_string(market, 'quote')
            base = self.safe_currency_code(baseId)
            quote = self.safe_currency_code(quoteId)
            symbol = base + '/' + quote
            precision = {
                'amount': self.safe_number(market, 'min_amount'),
                'price': self.safe_number(market, 'price_tick'),
            }
            limits = {
                'amount': {
                    'min': self.safe_number(market, 'min_amount'),
                    'max': None,
                },
                'price': {
                    'min': None,
                    'max': None,
                },
                'cost': {
                    'min': self.safe_number(market, 'min_value'),
                    'max': None,
                },
                'leverage': {
                    'min': None,
                    'max': None,
                },
            }
            active = self.safe_value(market, 'enabled', True)
            maker = 0.0025
            taker = 0.005
            result.append({
                'id': id,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'baseId': baseId,
                'quoteId': quoteId,
                'type': 'spot',
                'spot': True,
                'active': active,
                'precision': precision,
                'maker': maker,
                'taker': taker,
                'limits': limits,
                'settle': None,
                'settleId': None,
                'margin': False,
                'swap': False,
                'future': False,
                'option': False,
                'contract': False,
                'linear': None,
                'inverse': None,
                'contractSize': None,
                'expiry': None,
                'expiryDatetime': None,
                'strike': None,
                'optionType': None,
                'info': market,
            })
        return result

    def fetch_currencies(self, params={}):
        """
        fetches all available currencies on an exchange
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns dict: an associative dictionary of currencies
        """
        response = self.publicGetCurrencies(params)
        #
        #     {
        #         "data": [
        #             {
        #                 "active": True,
        #                 "code": "1INCH",
        #                 "id": "8c2b7f2a-31ed-4be1-8645-5232ac7de8fe",
        #                 "min_withdraw_amount": 1,
        #                 "name": "1inch",
        #                 "precision": 8,
        #                 "can_deposit": True,
        #                 "can_withdraw": True
        #             },
        #         ],
        #         "message": null
        #     }
        #
        results = self.safe_value(response, 'data', [])
        result = {}
        for i in range(0, len(results)):
            currency = results[i]
            id = self.safe_string(currency, 'id')
            code = self.safe_currency_code(self.safe_string(currency, 'code'))
            name = self.safe_string(currency, 'name')
            active = self.safe_value(currency, 'active', True)
            precision = self.safe_integer(currency, 'precision')
            min_withdraw_amount = self.safe_integer(currency, 'min_withdraw_amount')
            result[code] = {
                'id': id,
                'code': code,
                'name': name,
                'info': currency,
                'active': active,
                'fee': None,
                'precision': precision,
                'limits': {
                    'amount': {'min': None, 'max': None},
                    'withdraw': {'min': min_withdraw_amount, 'max': None},
                },
            }
        return result

    def fetch_ticker(self, symbol: str, params={}):
        """
        fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchTicker() requires a symbol argument')
        self.load_markets()
        symbol = self.symbol(symbol)
        request = {
            'pair': self.market_id(symbol),
        }
        response = self.publicGetTickersPair(self.extend(request, params))
        #
        #     {
        #         "message": null,
        #         "data": {
        #             "ask": 95629,
        #             "base_code": "BTC",
        #             "base_id": "9A5E2EF4-9547-418A-8EC6-C6EADBB8B32F",
        #             "bid": 94171,
        #             "date": "2022-11-11T01:31:35.820Z",
        #             "high": 98444,
        #             "is_frozen": False,
        #             "last": 94311,
        #             "low": 85034,
        #             "pair": "BTC_BRL",
        #             "price_change_percent_24h": "-12",
        #             "quote_id": "48898138-8623-4555-9468-B1A1505A9352",
        #             "quote_code": "BRL",
        #             "quote_volume": 150.1,
        #             "trades_quantity": 1199,
        #             "volume": 27.26776846
        #         }
        #     }
        #
        ripioTicker = self.safe_value(response, 'data', {})
        ticker = self.parse_ticker(ripioTicker, symbol)
        return ticker

    def fetch_tickers(self, symbols: Optional[List[str]] = None, params={}):
        """
        fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
        :param [str]|None symbols: not used by ripio fetchTickers
        :param dict params: not used by ripio fetchTickers
        :returns dict: a dictionary of `ticker structures <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        self.load_markets()
        response = self.publicGetTickers()
        #
        #     {
        #         "message": null,
        #         "data": [
        #             {
        #                 "ask": 250000.15,
        #                 "base_code": "BTC",
        #                 "base_id": "9A5E2EF4-9547-418A-8EC6-C6EADBB8B32F",
        #                 "bid": 240000.15,
        #                 "date": "2017-10-20T00:00:00Z",
        #                 "high": 250000.15,
        #                 "is_frozen": False,
        #                 "last": 245000.15,
        #                 "low": 200000.15,
        #                 "pair": "BTC_BRL",
        #                 "price_change_percent_24h": "-12",
        #                 "quote_code": "BRL",
        #                 "quote_id": "48898138-8623-4555-9468-B1A1505A9352",
        #                 "quote_volume": 150.1,
        #                 "trades_quantity": 123,
        #                 "volume": 123.12345678
        #             },
        #         ]
        #     }
        #
        ripioTickers = self.safe_value(response, 'data', [])
        tickers = {}
        ripioTickersLength = len(ripioTickers)
        for i in range(0, ripioTickersLength):
            ticker = ripioTickers[i]
            parsedTicker = self.parse_ticker(ticker)
            tickers[parsedTicker['symbol']] = parsedTicker
        return tickers

    def fetch_order_book(self, symbol: str, limit: Optional[int] = None, params={}):
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int|None limit: not used by ripio fetchOrderBook
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns dict: a dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        self.load_markets()
        symbol = self.symbol(symbol)
        params = self.extend(params, {'pair': self.market_id(symbol)})
        response = self.publicGetOrdersLevel3(params)
        #
        #     {
        #         "message": null,
        #         "data": {
        #             "timestamp": 1675708481219,
        #             "asks": [
        #                 {
        #                     "amount": 0.01187517,
        #                     "id": "554F2D70-04B9-4E26-9548-9C35B025A018",
        #                     "price": 14704.45
        #                 },
        #             ],
        #             "bids": [
        #                 {
        #                     "amount": 0.46097295,
        #                     "id": "E6D05F51-D79B-47CF-84C5-B157120EBC25",
        #                     "price": 14650.25
        #                 },
        #             ]
        #         }
        #     }
        #
        timestamp = self.safe_integer(response, 'timestamp')
        orderbook = self.parse_order_book(response['data'], symbol, timestamp, 'bids', 'asks', 'price', 'amount')
        return orderbook

    def fetch_l2_order_book(self, symbol: str, limit: Optional[int] = None, params={}):
        """
        fetches level 2 information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int|None limit: not used by ripio fetchL2OrderBook
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns dict: a dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        self.load_markets()
        symbol = self.symbol(symbol)
        params = self.extend(params, {'pair': self.market_id(symbol)})
        response = self.publicGetOrdersLevel2(params)
        #
        #     {
        #         "data": {
        #             "asks": [
        #                 {
        #                     "amount": 1,
        #                     "price": 10322
        #                 },
        #             ],
        #             "bids": [
        #                 {
        #                     "amount": 1.4550699999999999,
        #                     "price": 10273
        #                 },
        #             ],
        #             "timestamp": 1681738465751
        #         },
        #         "message": null
        #     }
        #
        orderbook = self.parse_order_book(response['data'], symbol, None, 'bids', 'asks', 'price', 'amount')
        return orderbook

    def fetch_trades(self, symbol: str, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        get the list of most recent trades for a particular symbol
        :param str symbol: unified symbol of the market to fetch trades for
        :param int|None since: timestamp in ms of the earliest trade to fetch
        :param int|None limit: the maximum amount of trades to fetch
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns [dict]: a list of `trade structures <https://docs.ccxt.com/en/latest/manual.html?#public-trades>`
        """
        self.load_markets()
        symbol = self.symbol(symbol)
        market = self.market(symbol)
        params = self.extend(params, {'pair': self.market_id(symbol)})
        response = self.publicGetTrades(params)
        #
        #     {
        #         "data": {
        #             "pagination": {
        #                 "current_page": 1,
        #                 "page_size": 200,
        #                 "registers_count": 71840,
        #                 "total_pages": 360
        #             },
        #             "trades": [
        #                 {
        #                     "amount": 0.02559772,
        #                     "date": "2023-04-17T13:47:29.483Z",
        #                     "id": "CC3A6AD4-C0F8-4E3D-A864-08111B1B3E1A",
        #                     "maker_order_id": "B0C92B05-8278-4482-AB56-8585A20A4366",
        #                     "maker_side": "sell",
        #                     "maker_type": "limit",
        #                     "pair": "BTC_BRL",
        #                     "price": 146849,
        #                     "taker_order_id": "46D112BB-5180-4F14-B2BF-B63E06D68F44",
        #                     "taker_side": "buy",
        #                     "taker_type": "market",
        #                     "timestamp": 1681739809450,
        #                     "total_value": 3758
        #                 },
        #             ]
        #         },
        #         "message": null
        #     }
        #
        data = self.safe_value(response, 'data')
        trades = self.safe_value(data, 'trades')
        return self.parse_trades(trades, market, since, limit)

    def fetch_balance(self, params={}):
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/en/latest/manual.html?#balance-structure>`
        """
        self.load_markets()
        response = self.privateGetUserBalances(params)
        #
        #     {
        #         "data": [
        #             {
        #                 "currency_code": "BTC",
        #                 "available_amount": 0.00047545,
        #                 "locked_amount": 0,
        #                 "last_update": "2023-02-22T15:22:36.647Z"
        #             },
        #         ],
        #         "message": null,
        #         "timestamp": 1681740098156
        #     }
        #
        result = {'info': response}
        data = self.safe_value(response, 'data')
        for i in range(0, len(data)):
            balance = data[i]
            currencyId = self.safe_string(balance, 'currency_code')
            code = self.safe_currency_code(currencyId)
            account = self.account()
            account['free'] = self.safe_number(balance, 'available_amount')
            account['used'] = self.safe_number(balance, 'locked_amount')
            account['total'] = self.safe_number(balance, 'available_amount') + self.safe_number(balance, 'locked_amount')
            result[code] = account
        return self.safe_balance(result)

    def create_order(self, symbol: str, type: str, side: OrderSide, amount, price=None, params={}):
        """
        create a trade order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float|None price: the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        symbol = self.symbol(symbol)
        request = {
            'pair': self.market_id(symbol),
            'type': type,
            'side': side,
            'amount': self.parse_number(amount),
        }
        if type == 'limit':
            request['price'] = self.parse_number(price)
        response = self.privatePostOrders(self.extend(request, params))
        #
        #     {
        #         "message": null,
        #         "data": {
        #             "id": "7155ED34-9EC4-4733-8B32-1E4319CB662F"
        #         }
        #     }
        #
        return response['data']['id']

    def cancel_order(self, id: str, symbol: Optional[str] = None, params={}):
        """
        cancels an open order
        :param str id: order id
        :param str|None symbol: not used by ripio cancelOrder()
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        request = {'id': id}
        response = self.privateDeleteOrders(self.extend(request, params))
        #
        #     {
        #         "message": null,
        #         "data": {
        #             "create_date": "2017-12-08T23:42:54.960Z",
        #             "executed_amount": 0.02347418,
        #             "external_id": "B4A9F7F4-9C79-4921-9330-224C17260BDF",
        #             "id": "7155ED34-9EC4-4733-8B32-1E4319CB662F",
        #             "pair": "BTC_BRL",
        #             "price": 42600,
        #             "remaining_amount": 0.1,
        #             "remaining_value": 0.6,
        #             "requested_amount": 0.02347418,
        #             "side": "buy",
        #             "status": "canceled",
        #             "total_value": 1000,
        #             "type": "limit",
        #             "update_date": "2017-12-13T21:48:48.817Z"
        #         }
        #     }
        #
        data = self.safe_value(response, 'data')
        if symbol is not None:
            symbol = self.symbol(symbol)
        else:
            pair = self.safe_value(data, 'pair')
            symbol = self.symbol(pair)
        market = self.market(symbol)
        return self.parse_order(data, market)

    def fetch_order(self, id: str, symbol: Optional[str] = None, params={}):
        """
        fetches information on an order made by the user
        :param str|None symbol: unified market symbol that the order was made in
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        request = {'id': id}
        response = self.privateGetOrdersId(self.extend(request, params))
        #
        #     {
        #         "message": null,
        #         "data": {
        #             "average_execution_price": 42600,
        #             "create_date": "2017-12-08T23:42:54.960Z",
        #             "external_id": "C90796F2-2CC3-4797-9AC3-A16BCC6936F0",
        #             "executed_amount": 0.02347418,
        #             "id": "8DE12108-4643-4E9F-8425-0172F1B96876",
        #             "remaining_amount": 0,
        #             "requested_amount": 0.02347418,
        #             "remaining_value": 0,
        #             "pair": "BTC_BRL",
        #             "price": 42600,
        #             "side": "buy",
        #             "status": "executed_completely",
        #             "tax_amount": 0.002,
        #             "total_value": 1000,
        #             "type": "limit",
        #             "update_date": "2017-12-13T21:48:48.817Z",
        #             "transactions": [
        #                 {
        #                     "amount": 0.2,
        #                     "create_date": "2020-02-21 20:24:43.433",
        #                     "fee": 0.12,
        #                     "fee_currency": "BTC",
        #                     "price": 5000,
        #                     "total_value": 1000
        #                 },
        #                 {
        #                     "amount": 0.2,
        #                     "create_date": "2020-02-21 20:49:37.450",
        #                     "fee": 0.12,
        #                     "fee_currency": "BTC",
        #                     "price": 5000,
        #                     "total_value": 1000
        #                 }
        #             ]
        #         }
        #     }
        #
        data = self.safe_value(response, 'data')
        if symbol is not None:
            symbol = self.symbol(symbol)
        else:
            pair = self.safe_value(data, 'pair')
            symbol = self.symbol(pair)
        market = self.market(symbol)
        return self.parse_order(data, market)

    def fetch_orders(self, symbol: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        fetches information on multiple orders made by the user
        :param str|None symbol: unified market symbol that the orders were made in
        :param int|None since: the earliest time in ms to fetch orders
        :param int|None limit: the maximum number of order structures to retrieve
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOrders() requires a symbol argument')
        symbol = self.symbol(symbol)
        self.load_markets()
        request = {
            'pair': self.market_id(symbol),
        }
        if limit is not None:
            request['page_size'] = limit
        side = self.safe_string(params, 'side', None)
        if side:
            request['side'] = side
        status = self.safe_string(params, 'status', None)
        if status:
            request['status'] = status
        response = self.privateGetOrders(self.extend(request, params))
        #
        #     {
        #         "message": null,
        #         "data": {
        #             "orders": [
        #                 {
        #                     "create_date": "2017-12-08T23:42:54.960Z",
        #                     "executed_amount": 0.02347418,
        #                     "external_id": "B4A9F7F4-9C79-4921-9330-224C17260BDF",
        #                     "id": "857C0A3B-D70F-4256-9051-1C62FADBA8FA",
        #                     "pair": "BTC_BRL",
        #                     "price": 42600,
        #                     "remaining_amount": 0,
        #                     "remaining_value": 0,
        #                     "requested_amount": 0.02347418,
        #                     "side": "buy",
        #                     "status": "executed_completely",
        #                     "total_value": 1000,
        #                     "type": "limit",
        #                     "update_date": "2017-12-13T21:48:48.817Z"
        #                 },
        #             ],
        #             "pagination": {
        #                 "current_page": 1,
        #                 "registers_count": 21,
        #                 "total_pages": 1,
        #                 "page_size": 100
        #             }
        #         }
        #     }
        #
        data = self.safe_value(response, 'data', {})
        orders = self.safe_value(data, 'orders', [])
        market = self.market(symbol)
        return self.parse_orders(orders, market, since, limit)

    def fetch_my_trades(self, symbol: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        fetch all trades made by the user
        :param str|None symbol: unified market symbol
        :param int|None since: the earliest time in ms to fetch trades for
        :param int|None limit: the maximum number of trades structures to retrieve
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns [dict]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        self.load_markets()
        request = {}
        market = None
        if symbol is not None:
            symbol = self.symbol(symbol)
            market = self.market(symbol)
            request['pair'] = self.market_id(symbol)
        if limit is not None:
            request['page_size'] = limit
        response = self.privateGetUserTrades(self.extend(request, params))
        #
        #     {
        #         "message": null,
        #         "data": {
        #             "trades": [
        #                 {
        #                     "amount": 0.00270754,
        #                     "date": "2019-04-02T11:22:22.403Z",
        #                     "fee": 0.25,
        #                     "fee_currency": "USDC",
        #                     "id": "488F9395-47ED-4924-98AB-C860E1733A03",
        #                     "pair_code": "BTC_USDC",
        #                     "price": 18550,
        #                     "side": "sell",
        #                     "timestamp": 1675708481219,
        #                     "type": "market",
        #                     "total_value": 50.22
        #                 },
        #             ],
        #             "pagination": {
        #                 "current_page": 1,
        #                 "registers_count": 21,
        #                 "total_pages": 1,
        #                 "page_size": 100
        #             }
        #         }
        #     }
        #
        data = self.safe_value(response, 'data', {})
        trades = self.safe_value(data, 'trades', [])
        return self.parse_trades(trades, market, since, limit)

    def fetch_open_orders(self, symbol: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        fetch all unfilled currently open orders
        :param str|None symbol: unified market symbol
        :param int|None since: the earliest time in ms to fetch open orders for
        :param int|None limit: the maximum number of  open orders structures to retrieve
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        request = {}
        market = None
        if symbol is not None:
            symbol = self.symbol(symbol)
            market = self.market(symbol)
            request['pair'] = self.market_id(symbol)
        if limit is not None:
            request['page_size'] = limit
        side = self.safe_string(params, 'side', None)
        if side is not None:
            request['side'] = side
        response = self.privateGetOrdersOpen(self.extend(request, params))
        #
        #     {
        #         "message": null,
        #         "data": {
        #             "orders": [
        #                 {
        #                     "create_date": "2017-12-08T23:42:54.960Z",
        #                     "executed_amount": 0.02347418,
        #                     "external_id": "B4A9F7F4-9C79-4921-9330-224C17260BDF",
        #                     "id": "857C0A3B-D70F-4256-9051-1C62FADBA8FA",
        #                     "pair": "BTC_BRL",
        #                     "price": 42600,
        #                     "remaining_amount": 0,
        #                     "remaining_value": 0,
        #                     "requested_amount": 0.02347418,
        #                     "side": "buy",
        #                     "status": "executed_completely",
        #                     "total_value": 1000,
        #                     "type": "limit",
        #                     "update_date": "2017-12-13T21:48:48.817Z"
        #                 },
        #             ],
        #             "pagination": {
        #                 "current_page": 1,
        #                 "registers_count": 21,
        #                 "total_pages": 1,
        #                 "page_size": 100
        #             }
        #         }
        #     }
        #
        data = self.safe_value(response, 'data', {})
        orders = self.safe_value(data, 'orders', [])
        return self.parse_orders(orders, market, since, limit)

    def fetch_closed_orders(self, symbol: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        fetches information on multiple closed orders made by the user
        :param str|None symbol: unified market symbol of the orders
        :param int|None since: timestamp in ms of the earliest order, default is None
        :param int|None limit: the maximum number of closed order structures to retrieve
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchClosedOrders() requires a symbol argument')
        symbol = self.symbol(symbol)
        request = {
            'status': ['executed_completely', 'canceled'],
        }
        orders = self.fetch_orders(symbol, since, limit, self.extend(request, params))
        #
        #     {
        #         "message": null,
        #         "data": {
        #             "orders": [
        #                 {
        #                     "create_date": "2017-12-08T23:42:54.960Z",
        #                     "executed_amount": 0.02347418,
        #                     "external_id": "B4A9F7F4-9C79-4921-9330-224C17260BDF",
        #                     "id": "857C0A3B-D70F-4256-9051-1C62FADBA8FA",
        #                     "pair": "BTC_BRL",
        #                     "price": 42600,
        #                     "remaining_amount": 0,
        #                     "remaining_value": 0,
        #                     "requested_amount": 0.02347418,
        #                     "side": "buy",
        #                     "status": "executed_completely",
        #                     "total_value": 1000,
        #                     "type": "limit",
        #                     "update_date": "2017-12-13T21:48:48.817Z"
        #                 },
        #             ],
        #             "pagination": {
        #                 "current_page": 1,
        #                 "registers_count": 21,
        #                 "total_pages": 1,
        #                 "page_size": 100
        #             }
        #         }
        #     }
        #
        return orders

    def fetch_canceled_orders(self, symbol: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        fetches information on multiple canceled orders made by the user
        :param str symbol: unified market symbol of the orders
        :param int|None since: timestamp in ms of the earliest order, default is None
        :param int|None limit: the maximum number of canceled order structures to retrieve
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns dict: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchCanceledOrders() requires a symbol argument')
        symbol = self.symbol(symbol)
        request = {
            'status': ['canceled'],
        }
        orders = self.fetch_orders(symbol, since, limit, self.extend(request, params))
        #
        #     {
        #         "message": null,
        #         "data": {
        #             "orders": [
        #                 {
        #                     "create_date": "2017-12-08T23:42:54.960Z",
        #                     "executed_amount": 0,
        #                     "external_id": "B4A9F7F4-9C79-4921-9330-224C17260BDF",
        #                     "id": "857C0A3B-D70F-4256-9051-1C62FADBA8FA",
        #                     "pair": "BTC_BRL",
        #                     "price": 42600,
        #                     "remaining_amount": 0.02347418,
        #                     "remaining_value": 0,
        #                     "requested_amount": 0.02347418,
        #                     "side": "buy",
        #                     "status": "canceled",
        #                     "total_value": 1000,
        #                     "type": "limit",
        #                     "update_date": "2017-12-13T21:48:48.817Z"
        #                 },
        #             ],
        #             "pagination": {
        #                 "current_page": 1,
        #                 "registers_count": 21,
        #                 "total_pages": 1,
        #                 "page_size": 100
        #             }
        #         }
        #     }
        #
        return orders

    def withdraw(self, code: str, amount, address, tag=None, params={}):
        """
        make a withdrawal
        :param str code: unified currency code
        :param float amount: the amount to withdraw
        :param str address: the address to withdraw to
        :param str|None tag:
        :param dict params: extra parameters specific to the ripio api endpoint
        :returns dict: a `transaction structure <https://docs.ccxt.com/#/?id=transaction-structure>`
        """
        tag, params = self.handle_withdraw_tag_and_params(tag, params)
        self.check_address(address)
        self.load_markets()
        currency = self.currency(code)
        feeType = self.safe_string(params, 'fee_type', 'regular')
        request = {
            'currency_code': currency['code'],
            'fee_type': feeType,
            'amount': amount,
            'destination': address,
        }
        if tag is not None:
            request['tag'] = tag
        memo = self.safe_string(params, 'memo')
        if memo is not None:
            request['memo'] = memo
        # TODO(pgold): add network parameter.
        response = self.privatePostWithdrawals(self.extend(request, params))
        data = self.safe_value(response, 'data')
        #
        #     {
        #         "data": {
        #             "amount": "1000",
        #             "create_date": "2023-07-13T15:54:27.710Z",
        #             "currency_code": "CREAL",
        #             "destination_address": " 0xEeA875a27ad44F6f4608097cFcb8c2417A235A41",
        #             "id": "idwxr8yoV",
        #             "link": null,
        #             "miner_fee": "0.1",
        #             "miner_fee_type": "regular",
        #             "network": "celo",
        #             "origin_address": "0x9e240434E845D7Bb2CE7218eD487687a6bC2E111",
        #             "status": "pending",
        #             "tax_amount": "0",
        #             "tax_index": "0",
        #             "tax_index_calculated": "0",
        #             "transaction_id": null,
        #             "update_date": "2023-07-11T12:22:34.590Z"
        #         },
        #         "message": null
        #     }
        #
        return self.parse_transaction(data, currency)

    def fetch_web_socket_ticket(self):
        """
        fetches a ticket so the user can connect to ripio's websocket private topics
        :returns str: a websocket ticket
        """
        self.load_markets()
        response = self.privatePostTicket()
        #
        #     {
        #         "message": null,
        #         "data": {
        #             "ticket": "D90A9A10-06AF-44AF-8592-BAF866DD1503"
        #         }
        #     }
        #
        data = self.safe_value(response, 'data')
        ticket = self.safe_string(data, 'ticket')
        return ticket

    def parse_ticker(self, ticker, symbol=None):
        #
        # fetchTicker(public), fetchTickers(public)
        #
        #      {
        #          "ask": 250000.15,
        #          "base_code": "BTC",
        #          "base_id": "9A5E2EF4-9547-418A-8EC6-C6EADBB8B32F",
        #          "bid": 240000.15,
        #          "date": "2017-10-20T00:00:00Z",
        #          "high": 250000.15,
        #          "is_frozen": False,
        #          "last": 245000.15,
        #          "low": 200000.15,
        #          "pair": "BTC_BRL",
        #          "price_change_percent_24h": "-12",
        #          "quote_code": "BRL",
        #          "quote_id": "48898138-8623-4555-9468-B1A1505A9352",
        #          "quote_volume": 150.1,
        #          "trades_quantity": 123,
        #          "volume": 123.12345678
        #      }
        #
        timestamp = self.parse_date(self.safe_string(ticker, 'date'))
        last = self.safe_number(ticker, 'last')
        pair = self.safe_string(ticker, 'pair')
        if symbol is None and pair is not None:
            symbol = self.symbol(pair)
        return self.safe_ticker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_string(ticker, 'high'),
            'low': self.safe_string(ticker, 'low'),
            'bid': self.safe_string(ticker, 'bid'),
            'bidVolume': None,
            'ask': self.safe_string(ticker, 'ask'),
            'askVolume': None,
            'vwap': None,
            'open': None,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': None,
            'percentage': self.safe_string(ticker, 'price_change_percent_24h'),
            'average': None,
            'baseVolume': self.safe_string(ticker, 'volume'),
            'quoteVolume': self.safe_string(ticker, 'quote_volume'),
            'info': ticker,
        })

    def parse_trade(self, trade, market=None):
        #
        # fetchTrades(public)
        #
        #      {
        #          "amount": 0.2404764,
        #          "date": "2019-01-03T02:27:33.947Z",
        #          "id": "2B222F22-5235-45FA-97FC-E9DBFA2575EE",
        #          "maker_order_id": "F49F5BD8-3F5B-4364-BCEE-F36F62DB966A",
        #          "maker_side": "buy",
        #          "maker_type": "limit",
        #          "price": 15160,
        #          "taker_order_id": "FEAB5CEC-7F9E-4F95-B67D-9E8D5C739BE3",
        #          "taker_side": "sell",
        #          "taker_type": "market",
        #          "timestamp": 1675708481219,
        #          "total_value": 3638.4
        #      }
        #
        # fetchMyTrades(private)
        #
        #      {
        #          "amount": 0.00270754,
        #          "date": "2019-04-02T11:22:22.403Z",
        #          "fee": 0.25,
        #          "fee_currency": "USDC",
        #          "id": "488F9395-47ED-4924-98AB-C860E1733A03",
        #          "pair_code": "BTC_USDC",
        #          "price": 18550,
        #          "side": "sell",
        #          "timestamp": 1675708481219,
        #          "type": "market",
        #          "total_value": 50.22
        #      }
        #
        timestamp = self.parse_date(self.safe_string(trade, 'date'))
        id = self.safe_string(trade, 'id')
        side = self.safe_string_lower(trade, 'side')
        if side is None:
            side = self.safe_string(trade, 'taker_side')
        takerOrMaker = self.safe_string(trade, 'taker_or_maker')
        if takerOrMaker is None:
            takerOrMaker = 'taker'
        price = self.safe_string(trade, 'price')
        amount = self.safe_string(trade, 'amount')
        fee = None
        pairCode = self.safe_string(trade, 'pair_code')
        pair = self.safe_string(trade, 'pair')
        symbol = self.safe_string(market, 'symbol')
        if symbol is not None:
            symbol = self.symbol(symbol)
        elif pair is not None:
            symbol = self.symbol(pair)
        elif pairCode is not None:
            symbol = self.symbol(pairCode)
        if market is None and symbol is not None:
            market = self.market(symbol)
        order = self.safe_string(trade, 'taker_order_id')
        type = self.safe_string(trade, 'type')
        if type is None:
            type = self.safe_string(trade, 'taker_type')
        return self.safe_trade({
            'id': id,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'type': type,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': None,
            'takerOrMaker': takerOrMaker,
            'fee': fee,
            'info': trade,
            'symbol': symbol,
            'order': order,
        }, market)

    def parse_order_status(self, status: str):
        statuses = {
            'executed_completely': 'closed',
            'executed_partially': 'open',
            'waiting': 'open',
            'canceled': 'canceled',
            'pending_creation': 'pending creation',
        }
        return self.safe_string(statuses, status, status)

    def parse_order(self, order, market=None):
        #
        # fetchOrder(private)
        #
        #      {
        #          "average_execution_price": 42600,
        #          "create_date": "2017-12-08T23:42:54.960Z",
        #          "external_id": "C90796F2-2CC3-4797-9AC3-A16BCC6936F0",
        #          "executed_amount": 0.02347418,
        #          "id": "8DE12108-4643-4E9F-8425-0172F1B96876",
        #          "remaining_amount": 0,
        #          "requested_amount": 0.02347418,
        #          "remaining_value": 0,
        #          "pair": "BTC_BRL",
        #          "price": 42600,
        #          "side": "buy",
        #          "status": "executed_completely",
        #          "tax_amount": 0.002,
        #          "total_value": 1000,
        #          "type": "limit",
        #          "update_date": "2017-12-13T21:48:48.817Z",
        #          "transactions": [
        #              {
        #                  "amount": 0.2,
        #                  "create_date": "2020-02-21 20:24:43.433",
        #                  "fee": 0.12,
        #                  "fee_currency": "BTC",
        #                  "price": 5000,
        #                  "total_value": 1000
        #              },
        #              {
        #                  "amount": 0.2,
        #                  "create_date": "2020-02-21 20:49:37.450",
        #                  "fee": 0.12,
        #                  "fee_currency": "BTC",
        #                  "price": 5000,
        #                  "total_value": 1000
        #              }
        #          ]
        #      }
        #
        # cancelOrder(private), fetchOrders(private), fetchOpenOrders(private), fetchClosedOrders(private), fetchCanceledOrders(private)
        #
        #      {
        #          "create_date": "2017-12-08T23:42:54.960Z",
        #          "executed_amount": 0.02347418,
        #          "external_id": "B4A9F7F4-9C79-4921-9330-224C17260BDF",
        #          "id": "7155ED34-9EC4-4733-8B32-1E4319CB662F",
        #          "pair": "BTC_BRL",
        #          "price": 42600,
        #          "remaining_amount": 0.1,
        #          "remaining_value": 0.6,
        #          "requested_amount": 0.02347418,
        #          "side": "buy",
        #          "status": "canceled",
        #          "total_value": 1000,
        #          "type": "limit",
        #          "update_date": "2017-12-13T21:48:48.817Z"
        #      }
        #
        id = self.safe_string(order, 'id')
        clientOrderId = self.safe_string(order, 'external_id')
        amount = self.safe_number(order, 'requested_amount')
        type = self.safe_string_lower(order, 'type')
        price = self.safe_number(order, 'price')
        side = self.safe_string_lower(order, 'side')
        status = self.parse_order_status(self.safe_string(order, 'status'))
        timestamp = self.parse_date(self.safe_string(order, 'create_date'))
        average = None
        filled = self.safe_number(order, 'executed_amount')
        cost = self.parse_number(Precise.string_mul(self.safe_string(order, 'price'), self.safe_string(order, 'executed_amount')))
        trades = None
        lastTradeTimestamp = None
        if filled > 0:
            lastTradeTimestamp = self.parse_date(self.safe_string(order, 'update_date'))
        remaining = self.safe_number(order, 'remaining_amount')
        symbol = None
        pair = self.safe_string(order, 'pair')
        if pair is not None:
            symbol = self.symbol(pair)
        if market is None and symbol is not None:
            market = self.market(symbol)
        return self.safe_order({
            'id': id,
            'clientOrderId': clientOrderId,
            'info': order,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': None,
            'postOnly': None,
            'side': side,
            'price': price,
            'stopPrice': None,
            'triggerPrice': None,
            'amount': amount,
            'cost': cost,
            'average': average,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': None,
            'trades': trades,
        }, market)

    def parse_transaction_status(self, status):
        statuses = {
            'pending': 'pending',
            'confirmed': 'ok',
            'canceled': 'failed',
        }
        return self.safe_string(statuses, status, status)

    def parse_transaction(self, transaction, currency=None):
        # TODO(pgold): fetchWithdrawals and fetchDeposits do not match.
        #
        # withdraw
        #
        #     {
        #         "amount": "1000",
        #         "create_date": "2023-07-13T15:54:27.710Z",
        #         "currency_code": "CREAL",
        #         "destination_address": " 0xEeA875a27ad44F6f4608097cFcb8c2417A235A41",
        #         "id": "idwxr8yoV",
        #         "link": null,
        #         "miner_fee": "0.1",
        #         "miner_fee_type": "regular",
        #         "network": "celo",
        #         "origin_address": "0x9e240434E845D7Bb2CE7218eD487687a6bC2E111",
        #         "status": "pending",
        #         "tax_amount": "0",
        #         "tax_index": "0",
        #         "tax_index_calculated": "0",
        #         "transaction_id": null,
        #         "update_date": "2023-07-11T12:22:34.590Z"
        #     },
        #
        # fetchWithdrawals
        #
        #     {
        #         "amount": 5000,
        #         "code": "eY_ZNjWJ8",
        #         "create_date": "2022-08-31T18:19:59.312Z",
        #         "currency_code": "CREAL",
        #         "destination_address": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
        #         "is_internal": False,
        #         "link": null,
        #         "miner_fee": 0.1,
        #         "miner_fee_type": "regular",
        #         "network": "celo",
        #         "origin_address": "0x9e240434E845D7Bb2CE7218eD487687a6bC2E111",
        #         "status": "confirmed",
        #         "tax_amount": 0,
        #         "tax_index": 0,
        #         "tax_index_calculated": 0,
        #         "transaction_id": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        #         "update_date": "2022-08-31T19:01:01.420Z"
        #     }
        #
        # fetchDeposits
        #
        #     {
        #         "amount": 458.81,
        #         "code": "Zet_q-K42",
        #         "confirmation_date": "2022-08-02T11:25:32.457Z",
        #         "create_date": "2022-08-02T11:24:28.332Z",
        #         "currency_code": "CREAL",
        #         "hash": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        #         "is_internal": False,
        #         "network": "celo",
        #         "status": "confirmed"
        #     }
        #
        id = self.safe_string(transaction, 'id')
        amount = self.safe_number(transaction, 'amount')
        addressTo = self.safe_string(transaction, 'origin_address')
        addressFrom = self.safe_string(transaction, 'destination_address')
        txid = self.safe_string_2(transaction, 'transaction_id', 'hash')
        create_datetime = self.safe_string(transaction, 'create_date')
        update_datetime = self.safe_string_2(transaction, 'update_date', 'confirmation_date')
        currencyId = self.safe_string(transaction, 'currency_code')
        code = self.safe_currency_code(currencyId, currency)
        status = self.parse_transaction_status(self.safe_string(transaction, 'status'))
        network = self.safe_string(transaction, 'network')
        tag = self.safe_string(transaction, 'tag')
        feeCost = self.safe_number(transaction, 'miner_fee')
        fee = None
        if feeCost is not None:
            fee = {'currency': code, 'cost': feeCost}
        return {
            'info': transaction,
            'id': id,
            'currency': code,
            'amount': amount,
            'network': network,
            'address': None,
            'addressTo': addressTo,
            'addressFrom': addressFrom,
            'tag': tag,
            'tagTo': None,
            'tagFrom': None,
            'status': status,
            'type': None,
            'updated': self.parse8601(update_datetime),
            'txid': txid,
            'timestamp': self.parse8601(create_datetime),
            'datetime': create_datetime,
            'fee': fee,
        }

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        request = '/' + self.implode_params(path, params)
        url = self.urls['api'][api] + request
        query = self.omit(params, self.extract_params(path))
        if api == 'public':
            if query:
                url += '?' + self.urlencode(query)
        elif api == 'private':
            self.check_required_credentials()
            if method == 'POST' or method == 'DELETE':
                body = self.json(query)
            else:
                if query:
                    url += '?' + self.urlencode(query)
            headers = {
                'Content-Type': 'application/json',
                'Authorization': self.apiKey,
            }
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if response is None:
            return
        if (code >= 400) and (code <= 503):
            feedback = self.id + ' ' + body
            message = self.safe_string(response, 'message')
            self.throw_broadly_matched_exception(self.exceptions['broad'], message, feedback)
            status = str(code)
            self.throw_exactly_matched_exception(self.exceptions['exact'], status, feedback)
