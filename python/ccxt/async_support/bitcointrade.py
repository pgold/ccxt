# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async_support.base.exchange import Exchange
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import BadRequest
from ccxt.base.errors import BadSymbol
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import InvalidOrder
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import RateLimitExceeded
from ccxt.base.errors import ExchangeNotAvailable
from ccxt.base.errors import OnMaintenance
from ccxt.base.decimal_to_precision import TICK_SIZE


class bitcointrade(Exchange):

    def describe(self):
        return self.deep_extend(super(bitcointrade, self).describe(), {
            'id': 'bitcointrade',
            'name': 'Bitcointrade',
            'countries': ['BR'],  # Brazil
            # 1 request/second for unverified customers.
            'rateLimit': 1000.0,
            'version': 'v3',
            'has': {
                'CORS': None,
                'spot': True,
                'margin': False,
                'swap': False,
                'future': False,
                'option': False,
                'addMargin': False,
                'cancelOrder': True,
                'createOrder': True,
                'createReduceOnlyOrder': False,
                'createStopLimitOrder': False,
                'createStopMarketOrder': False,
                'createStopOrder': False,
                'fetchAccounts': False,
                'fetchBalance': True,
                'fetchBorrowRate': False,
                'fetchBorrowRateHistories': False,
                'fetchBorrowRateHistory': False,
                'fetchBorrowRates': False,
                'fetchBorrowRatesPerSymbol': False,
                'fetchClosedOrders': True,
                'fetchCurrencies': True,
                'fetchDeposits': True,
                'fetchFundingHistory': False,
                'fetchFundingRate': False,
                'fetchFundingRateHistory': False,
                'fetchFundingRates': False,
                'fetchIndexOHLCV': False,
                'fetchLeverage': False,
                'fetchLeverageTiers': False,
                'fetchMarkets': True,
                'fetchMarkOHLCV': False,
                'fetchMyTrades': True,
                'fetchOHLCV': False,
                'fetchOpenInterestHistory': False,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrders': True,
                'fetchOrderTrades': True,
                'fetchPosition': False,
                'fetchPositions': False,
                'fetchPositionsRisk': False,
                'fetchPremiumIndexOHLCV': False,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTime': False,
                'fetchTrades': True,
                'fetchTradingFee': False,
                'fetchTradingFees': False,
                'fetchTransactions': False,
                'fetchWithdrawals': True,
                'reduceMargin': False,
                'setLeverage': False,
                'setMarginMode': False,
                'setPositionMode': False,
                'transfer': False,
                'withdraw': True,
            },
            'urls': {
                'logo': 'https://cwstatic.nyc3.digitaloceanspaces.com/1996/bitcointrade.png',
                'api': {
                    'public': 'https://api.bitcointrade.com.br',
                    'private': 'https://api.bitcointrade.com.br',
                },
                'www': 'https://www.bitcointrade.com.br',
                'doc': [
                    'https://apidocs.bitcointrade.com.br',
                ],
                'fees': 'https://www.bitcointrade.com.br/rates/',
                'referral': 'https://www.bitcointrade.com.br/?s=ccxt',
            },
            'api': {
                'public': {
                    'get': {
                        # Public
                        'public/{pair}/ticker': 1,
                        'public/ticker': 1,
                        'public/{pair}/orders': 1,
                        'public/{pair}/trades': 1,
                        'public/currencies': 1,
                        'public/pairs': 1,
                    },
                },
                'private': {
                    'get': {
                        # Market
                        'market/user_orders/list': 1,
                        'market/user_orders/open': 1,
                        'market/user_orders/{code}': 1,
                        'market/trades': 1,
                        # Transfers
                        '{currency}/deposits': 1,
                        '{currency}/withdraw': 1,
                        # Wallets
                        'wallets/balance': 1,
                        'wallets/{date}/balance': 1,
                    },
                    'post': {
                        # Market
                        'market/create_order': 1,
                        # Transfers
                        '{currency}/withdraw': 1,
                    },
                    'delete': {
                        # Market
                        'market/user_orders': 1,
                    },
                },
            },
            'fees': {
                'trading': {
                    'tierBased': False,
                    'percentage': True,
                    'taker': self.parse_number('0.0050'),
                    'maker': self.parse_number('0.0025'),
                },
            },
            'requiredCredentials': {
                'apiKey': True,
                'secret': False,  # Needed to override Exchange.js's default 'true'.
            },
            'precisionMode': TICK_SIZE,
            'exceptions': {
                'broad': {
                    'Saldo insuficiente': InsufficientFunds,
                    'Par de moedas inválido': BadSymbol,
                    'Ordem inválida': OrderNotFound,
                    'Quantidade de ordem inválida': InvalidOrder,
                },
            },
            'httpExceptions': {
                '400': BadRequest,  # Invalid parameters.
                '401': AuthenticationError,
                '402': AuthenticationError,  # Revoked token.
                '403': PermissionDenied,
                '404': BadRequest,  # Check request address.
                '405': ExchangeNotAvailable,  # Try again.
                '429': RateLimitExceeded,
                '500': ExchangeError,  # Try again.
                '502': ExchangeNotAvailable,
                '503': OnMaintenance,
            },
            'options': {
            },
        })

    async def fetch_markets(self, params={}):
        """
        retrieves data on all markets for bitcointrade
        :param dict params: extra parameters specific to the exchange api endpoint
        :returns [dict]: an array of objects representing market data
        """
        response = await self.publicGetPublicPairs(params)
        #
        #     {
        #         "data":[
        #             {
        #                 "base":"BTC",
        #                 "base_name":"Bitcoin",
        #                 "enabled":true,
        #                 "min_amount":0.00009662,
        #                 "min_value":10,
        #                 "price_tick":1,
        #                 "quote":"BRL",
        #                 "quote_name":"Brazilian real",
        #                 "symbol":"BRLBTC"
        #             }
        #         ],
        #         "message":null
        #     }
        #
        result = []
        data = self.safe_value(response, 'data', [])
        for i in range(0, len(data)):
            market = data[i]
            baseId = self.safe_string(market, 'base')
            quoteId = self.safe_string(market, 'quote')
            id = self.safe_string(market, 'symbol')
            base = self.safe_currency_code(baseId)
            quote = self.safe_currency_code(quoteId)
            enabled = self.safe_value(market, 'enabled')
            result.append({
                'id': id,
                'symbol': base + '/' + quote,
                'base': base,
                'quote': quote,
                'settle': None,
                'baseId': baseId,
                'quoteId': quoteId,
                'settleId': None,
                'type': 'spot',
                'spot': True,
                'margin': False,
                'swap': False,
                'future': False,
                'option': False,
                'active': enabled,
                'contract': False,
                'linear': None,
                'inverse': None,
                'contractSize': None,
                'expiry': None,
                'expiryDatetime': None,
                'strike': None,
                'optionType': None,
                'precision': {
                    'amount': None,
                    'price': self.safe_number(market, 'price_tick'),
                    'cost': None,
                },
                'limits': {
                    'leverage': {
                        'min': None,
                        'max': None,
                    },
                    'amount': {
                        'min': self.safe_number(market, 'min_amount'),
                        'max': None,
                    },
                    'price': {
                        'min': None,
                        'max': None,
                    },
                    'cost': {
                        'min': self.safe_number(market, 'min_value'),
                        'max': None,
                    },
                },
                'info': market,
            })
        return result

    async def fetch_currencies(self, params={}):
        """
        fetches all available currencies on an exchange
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns dict: an associative dictionary of currencies
        """
        response = await self.publicGetPublicCurrencies(params)
        #
        #     {
        #         "data": [
        #             {
        #                 "active": True,
        #                 "code": "BTC",
        #                 "min_withdraw_amount": 0.001,
        #                 "name": "Bitcoin",
        #                 "precision": 8
        #             }
        #         ],
        #         "message": null
        #     }
        #
        result = {}
        data = self.safe_value(response, 'data', [])
        for i in range(0, len(data)):
            currency = data[i]
            currencyId = self.safe_value(currency, 'code')
            code = self.safe_currency_code(currencyId)
            result[code] = {
                'info': currency,
                'code': code,
                'id': currencyId,
                'name': self.safe_string(currency, 'name'),
                'active': self.safe_value(currency, 'active'),
                'deposit': None,
                'withdraw': None,
                'fee': None,
                'precision': self.parse_number(self.parse_precision(self.safe_string(currency, 'precision'))),
                'limits': {
                    'amount': {
                        'min': None,
                        'max': None,
                    },
                },
                'networks': None,
            }
        return result

    def parse_ticker(self, ticker, market=None):
        #
        # Called by both fetchTicker and fetchTickers.
        #
        # {
        #     "buy":102500,
        #     "date":"2022-08-30T10:00:34.098Z",
        #     "high":103987,
        #     "last":103483,
        #     "low":100724,
        #     "pair": "BRLBTC",  # only available when requesting multiple tickers.
        #     "sell":103483,
        #     "trades_quantity":807,
        #     "volume":8.27278407
        # }
        #
        datetime = self.safe_string(ticker, 'date')
        timestamp = self.parse8601(datetime)
        marketId = self.safe_string(ticker, 'pair')
        symbol = self.safe_symbol(marketId, market)
        return self.safe_ticker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': datetime,
            'high': self.safe_number(ticker, 'high'),
            'low': self.safe_number(ticker, 'low'),
            'bid': self.safe_string(ticker, 'buy'),
            'bidVolume': None,
            'ask': self.safe_string(ticker, 'sell'),
            'askVolume': None,
            'vwap': None,
            'open': None,
            'close': None,
            'last': self.safe_number(ticker, 'last'),
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': self.safe_number(ticker, 'volume'),
            'quoteVolume': None,
            'info': ticker,
        }, market)

    async def fetch_ticker(self, symbol, params={}):
        """
        fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/en/latest/manual.html#ticker-structure>`
        """
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'pair': market['id'],
        }
        response = await self.publicGetPublicPairTicker(self.extend(request, params))
        #
        #     {
        #         "data": {
        #             "buy": 103478,
        #             "date": "2022-09-01T10:06:39.520Z",
        #             "high": 106400,
        #             "last": 103020,
        #             "low": 103000,
        #             "sell": 103999,
        #             "trades_quantity": 856,
        #             "volume": 12.08688889
        #         },
        #         "message": null
        #     }
        #
        data = self.safe_value(response, 'data', {})
        return self.parse_ticker(data, market)

    async def fetch_tickers(self, symbols=None, params={}):
        """
        fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
        :param [str]|None symbols: unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns dict: an array of `ticker structures <https://docs.ccxt.com/en/latest/manual.html#ticker-structure>`
        """
        await self.load_markets()
        symbols = self.market_symbols(symbols)
        response = await self.publicGetPublicTicker(params)
        #
        #     {
        #         "data": [
        #             {
        #                 "buy": 103478,
        #                 "date": "2022-09-01T10:06:39.520Z",
        #                 "high": 106400,
        #                 "last": 103020,
        #                 "low": 103000,
        #                 "pair": "BRLBTC",
        #                 "sell": 103999,
        #                 "trades_quantity": 856,
        #                 "volume": 12.08688889
        #             }
        #         ],
        #         "message": null
        #     }
        #
        data = self.safe_value(response, 'data', [])
        result = {}
        for i in range(0, len(data)):
            ticker = self.parse_ticker(data[i])
            symbol = ticker['symbol']
            result[symbol] = ticker
        return self.filter_by_array(result, 'symbol', symbols)

    async def fetch_order_book(self, symbol, limit=None, params={}):
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int|None limit: the maximum amount of order book entries to return
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/en/latest/manual.html#order-book-structure>` indexed by market symbols
        """
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'pair': market['id'],
        }
        if limit is not None:
            params['limit'] = limit  # limit in [1, 200].
        response = await self.publicGetPublicPairOrders(self.extend(request, params))
        #
        #     {
        #         "data": {
        #             "asks": [
        #                 {"amount": 0.421323, "code": "kSR46XWXj", "unit_price": 102499},
        #                 {"amount": 0.030354, "code": "U22MCtoNa", "unit_price": 102500},
        #                 {"amount": 0.056582, "code": "uWc7LPB9C", "unit_price": 103255}
        #             ],
        #             "bids": [
        #                 {"amount": 0.019698, "code": "cFfAKFfit", "unit_price": 102000},
        #                 {"amount": 0.024509, "code": "eR7m5k4rd", "unit_price": 102000},
        #                 {"amount": 0.124996, "code": "O7gTiVyjp", "unit_price": 101867}
        #             ]
        #         },
        #         "message": null
        #     }
        #
        data = self.safe_value(response, 'data', {})
        return self.parse_order_book(data, symbol, None, 'bids', 'asks', 'unit_price', 'amount')

    def parse_trade_type(self, status):
        statuses = {
            'buy': 'buy',
            'sell': 'buy',
            'compra': 'compra',
            'venda': 'venda',
        }
        return self.safe_string(statuses, status, status)

    def parse_trade(self, trade, market=None):
        #
        # fetchTrades
        #
        #     {
        #         "active_order_code": "BL-Xiv4hZ",
        #         "amount": 0.006911,
        #         "date": "2022-08-30T10:56:17.010Z",
        #         "passive_order_code": "Lh766vBDT",
        #         "type": "sell",
        #         "unit_price": 102607
        #     }
        #
        # fetchOrderTrades
        #
        #      {
        #          "amount": 0.2,
        #          "create_date": "2020-02-21 20:49:37.450",
        #          "total_price": 1000,
        #          "unit_price": 5000
        #          "code": "SkvtQoOZf",
        #          "type": "buy",
        #          "subtype": "limited",
        #          "pair": "USDCBTC",
        #      }
        #
        # private fetchMyTrades
        #
        #      {
        #          "amount": 0.000992,
        #          "date": "2022-08-30T17:40:04.653Z",
        #          "fee": 0,
        #          "fee_currency": "BRL",
        #          "pair_code": "BRLBTC",
        #          "subtype": "mercado",
        #          "total_price": 99,
        #          "type": "venda",
        #          "unit_price": 100681
        #      }
        #
        datetime = self.safe_string(trade, 'date')
        timestamp = self.parse8601(datetime)
        priceString = self.safe_string(trade, 'unit_price')
        orderId = self.safe_string(trade, 'code')
        side = self.safe_string_lower(trade, 'side')
        marketId = self.safe_string_2(trade, 'pair', 'pair_code')
        symbol = self.safe_symbol(marketId, market)
        type = self.parse_trade_type(self.safe_string(trade, 'type'))
        amountString = self.safe_string(trade, 'amount')
        costString = self.safe_string(trade, 'total_price')
        feeString = self.safe_string(trade, 'fee')
        fee = None
        if feeString is not None:
            feeCurrencyId = self.safe_string(trade, 'feeCurrency')
            feeCurrencyCode = self.safe_currency_code(feeCurrencyId)
            fee = {
                'cost': self.safe_string(trade, 'feeAmount'),
                'currency': feeCurrencyCode,
            }
        return self.safe_trade({
            'id': None,
            'order': orderId,
            'timestamp': timestamp,
            'datetime': datetime,
            'symbol': symbol,
            'type': type,
            'side': side,
            'price': priceString,
            'amount': amountString,
            'cost': costString,
            'takerOrMaker': None,
            'fee': fee,
            'info': trade,
        }, market)

    async def fetch_trades(self, symbol, since=None, limit=None, params={}):
        """
        get the list of most recent trades for a particular symbol
        :param str symbol: unified symbol of the market to fetch trades for
        :param int|None since: timestamp in ms of the earliest trade to fetch
        :param int|None limit: the maximum amount of trades to fetch
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns [dict]: a list of `trade structures <https://docs.ccxt.com/en/latest/manual.html?#public-trades>`
        """
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'pair': market['id'],
        }
        if limit is not None:
            request['limit'] = limit  # default 100
        response = await self.publicGetPublicPairTrades(self.extend(request, params))
        #
        #    {
        #        "data": {
        #            "pagination": {
        #                "current_page": 1,
        #                "page_size": 20,
        #                "registers_count": 3181802,
        #                "total_pages": 159091
        #            },
        #            "trades": [
        #                {
        #                    "active_order_code": "BL-Xiv4hZ",
        #                    "amount": 0.006911,
        #                    "date": "2022-08-30T10:56:17.010Z",
        #                    "passive_order_code": "Lh766vBDT",
        #                    "type": "sell",
        #                    "unit_price": 102607
        #                }
        #            ]
        #        },
        #        "message": null
        #    }
        #
        data = self.safe_value(response, 'data', {})
        trades = self.safe_value(data, 'trades', [])
        return self.parse_trades(trades, market, since, limit)

    def parse_balance(self, response):
        data = self.safe_value(response, 'data', [])
        result = {
            'info': response,
            'timestamp': None,
            'datetime': None,
        }
        for i in range(0, len(data)):
            balance = data[i]
            currencyId = self.safe_string(balance, 'currency_code')
            code = self.safe_currency_code(currencyId)
            account = self.account()
            account['free'] = self.safe_number(balance, 'available_amount')
            account['used'] = self.safe_number(balance, 'locked_amount')
            account['total'] = account['free'] + account['used']
            result[code] = account
        return self.safe_balance(result)

    async def fetch_balance(self, params={}):
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/en/latest/manual.html?#balance-structure>`
        """
        await self.load_markets()
        response = await self.privateGetWalletsBalance(params)
        #
        #     {
        #         "data": [
        #             {
        #                 "address": null,
        #                 "available_amount": 1298.82,
        #                 "currency_code": "BRL",
        #                 "last_update": "2022-08-30T17:41:56.936Z",
        #                 "locked_amount": 239.54,
        #                 "memo": null,
        #                 "supported_networks_for_deposit": [],
        #                 "tag": null
        #             },
        #             {
        #                 "address": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
        #                 "available_amount": 0,
        #                 "currency_code": "BTC",
        #                 "last_update": "2022-08-30T17:42:04.523Z",
        #                 "locked_amount": 0,
        #                 "memo": null,
        #                 "supported_networks_for_deposit": [
        #                     "bitcoin"
        #                 ],
        #                 "tag": null
        #             }
        #         ],
        #         "message": null
        #     }
        #
        return self.parse_balance(response)

    async def create_order(self, symbol, type, side, amount, price=None, params={}):
        """
        create a trade order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float|None price: the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/en/latest/manual.html#order-structure>`
        """
        await self.load_markets()
        market = self.market(symbol)
        orderSubType = 'limited'
        if type == 'market':
            orderSubType = 'market'
        # amountToPrecision is not used as there's no amount precision
        # information in the markets. The base currency precision could be
        # be used instead, but Bitcointrade has lower precision on some pairs
        # than on their base currency.
        # Amounts with a higher precision than what is supported by a pair
        # is silently truncated by Bitcointrade.
        request = {
            'amount': amount,
            'subtype': orderSubType,
            'type': side,
            'pair': market['id'],
        }
        # Even though the documentation states that 'unit_price' is always
        # required, Bitcointrade accepts market orders without a price.
        if type == 'limit':
            request['unit_price'] = self.price_to_precision(symbol, price)
        response = await self.privatePostMarketCreateOrder(self.extend(request, params))
        #
        #     {
        #         "data": {
        #             "code": "F2ZJW7wqi",
        #         },
        #         "message": null
        #     }
        #
        data = self.safe_value(response, 'data', {})
        return self.parse_order(data, market)

    async def cancel_order(self, id, symbol=None, params={}):
        """
        cancels an open order
        :param str id: order id
        :param str|None symbol: not used by bitcointrade cancelOrder()
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/en/latest/manual.html#order-structure>`
        """
        await self.load_markets()
        request = {
            'code': id,
        }
        response = await self.privateDeleteMarketUserOrders(self.extend(request, params))
        #
        #     {
        #         "data": {
        #             "code": "F2ZJW7wqi",
        #             "create_date": "2022-08-30T17:40:04.637Z",
        #             "executed_amount": 0.000992,
        #             "pair": "BRLBTC",
        #             "remaining_amount": 0,
        #             "remaining_price": 0,
        #             "requested_amount": 0.000992,
        #             "status": "executed_completely",
        #             "subtype": "market",
        #             "total_price": 99,
        #             "type": "sell",
        #             "unit_price": 99798.38709677,
        #             "update_date": "2022-08-30T17:40:04.657Z"
        #         },
        #         "message": null
        #     }
        #
        data = self.safe_value(response, 'data', {})
        return self.parse_order(data)

    async def fetch_order(self, id, symbol=None, params={}):
        """
        fetches information on an order made by the user
        :param str|None symbol: not used by bitcointrade fetchOrder
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/en/latest/manual.html#order-structure>`
        """
        await self.load_markets()
        request = {
            'code': id,
        }
        response = await self.privateGetMarketUserOrdersCode(self.extend(request, params))
        #
        #     {
        #         "data": {
        #             "code": "SkvtQoOZf",
        #             "type": "buy",
        #             "subtype": "limited",
        #             "requested_amount": 0.02347418,
        #             "remaining_amount": 0,
        #             "unit_price": 42600,
        #             "status": "executed_completely",
        #             "create_date": "2017-12-08T23:42:54.960Z",
        #             "update_date": "2017-12-13T21:48:48.817Z",
        #             "pair": "USDCBTC",
        #             "total_price": 1000,
        #             "executed_amount": 0.02347418,
        #             "remaining_price": 0,
        #             "transactions": [
        #                 {
        #                     "amount": 0.2,
        #                     "create_date": "2020-02-21 20:24:43.433",
        #                     "total_price": 1000,
        #                     "unit_price": 5000
        #                 },
        #                 {
        #                     "amount": 0.2,
        #                     "create_date": "2020-02-21 20:49:37.450",
        #                     "total_price": 1000,
        #                     "unit_price": 5000
        #                 }
        #             ]
        #         },
        #         "message": null
        #     }
        #
        data = self.safe_value(response, 'data', {})
        return self.parse_order(data)

    async def fetch_orders(self, symbol=None, since=None, limit=None, params={}):
        """
        fetches information on multiple orders made by the user
        :param str|None symbol: unified market symbol of the market orders were made in
        :param int|None since: the earliest time in ms to fetch orders for
        :param int|None limit: the maximum number of  orde structures to retrieve
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/en/latest/manual.html#order-structure>`
        """
        await self.load_markets()
        request = {}
        market = None
        if symbol is not None:
            market = self.market(symbol)
            request['pair'] = market['id']
        if since is not None:
            request['start_date'] = since
        if limit is not None:
            request['page_size'] = limit
        response = await self.privateGetMarketUserOrdersList(self.extend(request, params))
        #
        #     {
        #         "data": {
        #             "orders": [
        #                 {
        #                     "code": "F2ZJW7wqi",
        #                     "create_date": "2022-08-30T17:40:04.637Z",
        #                     "executed_amount": 0.000992,
        #                     "pair": "BRLBTC",
        #                     "remaining_amount": 0,
        #                     "remaining_price": 0,
        #                     "requested_amount": 0.000992,
        #                     "status": "executed_completely",
        #                     "subtype": "market",
        #                     "total_price": 99,
        #                     "type": "sell",
        #                     "unit_price": 99798.38709677,
        #                     "update_date": "2022-08-30T17:40:04.657Z"
        #                 }
        #             ],
        #             "pagination": {
        #                 "current_page": 1,
        #                 "page_size": 20,
        #                 "registers_count": 1,
        #                 "total_pages": 1
        #             }
        #         },
        #         "message": null
        #     }
        #
        data = self.safe_value(response, 'data', {})
        orders = self.safe_value(data, 'orders', [])
        return self.parse_orders(orders, market, since, limit)

    async def fetch_open_orders(self, symbol=None, since=None, limit=None, params={}):
        """
        fetch all unfilled currently open orders
        :param str|None symbol: unified market symbol
        :param int|None since: the earliest time in ms to fetch open orders for
        :param int|None limit: the maximum number of  open orders structures to retrieve
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/en/latest/manual.html#order-structure>`
        """
        await self.load_markets()
        request = {}
        market = None
        if symbol is not None:
            market = self.market(symbol)
            request['pair'] = market['id']
        if since is not None:
            request['start_date'] = since
        if limit is not None:
            request['page_size'] = limit
        response = await self.privateGetMarketUserOrdersOpen(self.extend(request, params))
        #
        #     {
        #         "data": {
        #             "orders": [
        #                 {
        #                     "code": "F2ZJW7wqi",
        #                     "create_date": "2022-08-30T17:40:04.637Z",
        #                     "executed_amount": 0.000992,
        #                     "pair": "BRLBTC",
        #                     "remaining_amount": 0,
        #                     "remaining_price": 0,
        #                     "requested_amount": 0.000992,
        #                     "status": "executed_completely",
        #                     "subtype": "market",
        #                     "total_price": 99,
        #                     "type": "sell",
        #                     "unit_price": 99798.38709677,
        #                     "update_date": "2022-08-30T17:40:04.657Z"
        #                 }
        #             ],
        #             "pagination": {
        #                 "current_page": 1,
        #                 "page_size": 20,
        #                 "registers_count": 57,
        #                 "total_pages": 3
        #             }
        #         },
        #         "message": null
        #     }
        #
        data = self.safe_value(response, 'data', {})
        orders = self.safe_value(data, 'orders', [])
        return self.parse_orders(orders, market, since, limit)

    async def fetch_closed_orders(self, symbol=None, since=None, limit=None, params={}):
        """
        fetches information on multiple closed orders made by the user
        :param str|None symbol: unified market symbol of the market orders were made in
        :param int|None since: the earliest time in ms to fetch orders for
        :param int|None limit: the maximum number of  orde structures to retrieve
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/en/latest/manual.html#order-structure>`
        """
        request = {
            'status': ['executed_completely', 'canceled'],
        }
        return await self.fetch_orders(symbol, since, limit, self.extend(request, params))

    async def fetch_order_trades(self, id, symbol=None, since=None, limit=None, params={}):
        """
        fetch all the trades made from a single order
        :param str id: order id
        :param str|None symbol: unified market symbol
        :param int|None since: the earliest time in ms to fetch trades for
        :param int|None limit: the maximum number of trades to retrieve
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns [dict]: a list of `trade structures <https://docs.ccxt.com/en/latest/manual.html#trade-structure>`
        """
        await self.load_markets()
        market = None
        if symbol is not None:
            market = self.market(symbol)
        request = {
            'code': id,
        }
        response = await self.privateGetOrdersFill(self.extend(request, params))
        #
        #     {
        #         "data": {
        #             "code": "SkvtQoOZf",
        #             "type": "buy",
        #             "subtype": "limited",
        #             "requested_amount": 0.02347418,
        #             "remaining_amount": 0,
        #             "unit_price": 42600,
        #             "status": "executed_completely",
        #             "create_date": "2017-12-08T23:42:54.960Z",
        #             "update_date": "2017-12-13T21:48:48.817Z",
        #             "pair": "USDCBTC",
        #             "total_price": 1000,
        #             "executed_amount": 0.02347418,
        #             "remaining_price": 0,
        #             "transactions": [
        #                 {
        #                     "amount": 0.2,
        #                     "create_date": "2020-02-21 20:24:43.433",
        #                     "total_price": 1000,
        #                     "unit_price": 5000
        #                 },
        #                 {
        #                     "amount": 0.2,
        #                     "create_date": "2020-02-21 20:49:37.450",
        #                     "total_price": 1000,
        #                     "unit_price": 5000
        #                 }
        #             ]
        #         },
        #         "message": null
        #     }
        #
        data = self.safe_value(response, 'data', {})
        transactions = self.safe_value(data, 'transactions', [])
        # Since a transaction, as returned, only has amount, price and time,
        # the other relevant fields are copied from the order.
        baseTransaction = {
            'code': self.safe_string(data, 'code'),
            'type': self.safe_string(data, 'type'),
            'subtype': self.safe_string(data, 'subtype'),
            'pair': self.safe_string(data, 'pair'),
        }
        extendedTransactions = []
        for i in range(0, len(transactions)):
            extendedTransactions.append(self.extend(transactions[i], baseTransaction))
        return self.parse_trades(extendedTransactions, market, since, limit)

    def parse_order_status(self, status):
        statuses = {
            'executed_completely': 'closed',
            'executed_partially': 'open',
            'waiting': 'open',
            'canceled': 'canceled',
            'pending_creation': 'open',
        }
        return self.safe_string(statuses, status, status)

    def parse_order(self, order, market=None):
        #
        # cancelOrder, fetchOrders, fetchOrder
        #
        #     {
        #         "code": "F2ZJW7wqi",
        #         "create_date": "2022-08-30T17:40:04.637Z",
        #         "executed_amount": 0.000992,
        #         "pair": "BRLBTC",
        #         "remaining_amount": 0,
        #         "remaining_price": 0,
        #         "requested_amount": 0.000992,
        #         "status": "executed_completely",
        #         "subtype": "market",
        #         "total_price": 99,
        #         "type": "sell",
        #         "unit_price": 99798.38709677,
        #         "update_date": "2022-08-30T17:40:04.657Z"
        #     }
        #
        # createOrder
        #
        #     {
        #         "code": "F2ZJW7wqi",
        #     }
        #
        id = self.safe_string(order, 'code')
        amount = self.safe_string(order, 'requested_amount')
        price = self.safe_string(order, 'unit_price')
        cost = self.safe_number(order, 'total_price')
        type = self.safe_string_lower(order, 'subtype')
        side = self.safe_string_lower(order, 'type')
        status = self.parse_order_status(self.safe_string(order, 'status'))
        datetime = self.safe_string(order, 'create_date')
        timestamp = self.parse8601(datetime)
        filled = self.safe_number(order, 'executed_amount')
        marketId = self.safe_string(order, 'pair')
        symbol = self.safe_symbol(marketId, market)
        stopPrice = self.safe_number(order, 'stopPrice')
        return self.safe_order({
            'id': id,
            'clientOrderId': None,
            'info': order,
            'timestamp': timestamp,
            'datetime': datetime,
            'lastTradeTimestamp': None,
            'symbol': symbol,
            'type': type,
            'timeInForce': None,
            'postOnly': None,
            'side': side,
            'price': price,
            'stopPrice': stopPrice,
            'amount': amount,
            'cost': cost,
            'average': None,
            'filled': filled,
            'remaining': None,
            'status': status,
            'fee': None,
            'trades': None,
        }, market)

    async def withdraw(self, code, amount, address, tag=None, params={}):
        """
        make a withdrawal
        :param str code: unified currency code
        :param float amount: the amount to withdraw
        :param str address: the address to withdraw to
        :param str|None tag:
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns dict: a `transaction structure <https://docs.ccxt.com/en/latest/manual.html#transaction-structure>`
        """
        tag, params = self.handle_withdraw_tag_and_params(tag, params)
        await self.load_markets()
        currency = self.currency(code)
        feeType = self.safe_string(params, 'fee_type', 'regular')
        request = {
            'currency': currency['id'],
            'fee_type': feeType,
            'amount': self.currency_to_precision(code, amount),
            'destination': address,
        }
        if tag is not None:
            request['tag'] = tag
        memo = self.safe_string(params, 'memo')
        if memo is not None:
            request['memo'] = memo
        response = await self.privatePostCurrencyWithdraw(self.extend(request, params))
        #
        #     {
        #         "data": {
        #             "code": "B1qBrtEBN",
        #             "origin_address": "rJhgs18yEFLLSnPa3CwviTo2UDkesdPoSQ",
        #             "destination_address": "rw9nf3WgsagJiZnkAeZzXZuqeCQ6LHm2h1",
        #             "amount": 0.1,
        #             "miner_fee": 0.000012,
        #             "miner_fee_type": "regular",
        #             "tax_index": 0,
        #             "tax_index_calculated": 0,
        #             "tax_amount": 0,
        #             "status": "pending",
        #             "create_date": "2019-01-25T16:37:15.443Z",
        #             "update_date": "2019-01-25T16:37:15.017Z",
        #             "transaction_id": null,
        #             "link": null,
        #             "tag": "0100000020"
        #         },
        #         "message": null
        #     }
        #
        return self.parse_transaction(response, currency)

    async def fetch_deposits(self, code=None, since=None, limit=None, params={}):
        """
        fetch all deposits made to an account
        :param str|None code: unified currency code
        :param int|None since: the earliest time in ms to fetch deposits for
        :param int|None limit: the maximum number of deposits structures to retrieve
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns [dict]: a list of `transaction structures <https://docs.ccxt.com/en/latest/manual.html#transaction-structure>`
        """
        request = {}
        currency = None
        if code is not None:
            currency = self.currency(code)
            request['currency'] = currency['id']
        if since is not None:
            request['start_date'] = since
        if limit is not None:
            request['page_size'] = limit
        response = await self.privateGetCurrencyDeposits(self.extend(request, params))
        #     {
        #         "data": {
        #             "deposits": [
        #                 {
        #                     "amount": 458.81,
        #                     "code": "Zet_q-K42",
        #                     "confirmation_date": "2022-08-02T11:25:32.457Z",
        #                     "create_date": "2022-08-02T11:24:28.332Z",
        #                     "currency_code": "CREAL",
        #                     "hash": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        #                     "is_internal": False,
        #                     "network": "celo",
        #                     "status": "confirmed"
        #                 }
        #             ],
        #             "pagination": {
        #                 "current_page": 1,
        #                 "page_size": 20,
        #                 "registers_count": 1,
        #                 "total_pages": 1
        #             }
        #         },
        #         "message": null
        #     }
        data = self.safe_value(response, 'data')
        deposits = self.safe_value(data, 'deposits')
        return self.parse_transactions(deposits, currency, since, limit, {'type': 'deposit'})

    async def fetch_withdrawals(self, code=None, since=None, limit=None, params={}):
        """
        fetch all withdrawals made from an account
        :param str|None code: unified currency code
        :param int|None since: the earliest time in ms to fetch withdrawals for
        :param int|None limit: the maximum number of withdrawals structures to retrieve
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns [dict]: a list of `transaction structures <https://docs.ccxt.com/en/latest/manual.html#transaction-structure>`
        """
        request = {}
        currency = None
        if code is not None:
            currency = self.currency(code)
            request['currency'] = currency['id']
        if since is not None:
            request['start_date'] = since
        if limit is not None:
            request['page_size'] = limit
        response = await self.privateGetCurrencyWithdraw(self.extend(request, params))
        #     {
        #         "data": {
        #             "pagination": {
        #                 "current_page": 1,
        #                 "page_size": 20,
        #                 "registers_count": 1,
        #                 "total_pages": 1
        #             },
        #             "withdrawals": [
        #                 {
        #                     "amount": 5000,
        #                     "code": "eY_ZNjWJ8",
        #                     "create_date": "2022-08-31T18:19:59.312Z",
        #                     "currency_code": "CREAL",
        #                     "destination_address": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
        #                     "is_internal": False,
        #                     "link": null,
        #                     "miner_fee": 0.1,
        #                     "miner_fee_type": "regular",
        #                     "network": "celo",
        #                     "origin_address": "0x9e240434E845D7Bb2CE7218eD487687a6bC2E111",
        #                     "status": "confirmed",
        #                     "tax_amount": 0,
        #                     "tax_index": 0,
        #                     "tax_index_calculated": 0,
        #                     "transaction_id": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        #                     "update_date": "2022-08-31T19:01:01.420Z"
        #                 }
        #             ]
        #         },
        #         "message": null
        #     }
        data = self.safe_value(response, 'data')
        withdrawals = self.safe_value(data, 'withdrawals')
        return self.parse_transactions(withdrawals, currency, since, limit, {'type': 'withdrawal'})

    def parse_transaction_status(self, status):
        statuses = {
            'pending': 'pending',
            'confirmed': 'ok',
            'canceled': 'failed',
        }
        return self.safe_string(statuses, status, status)

    def parse_transaction(self, transaction, currency=None):
        #
        # withdraw
        #
        #     {
        #         "code": "B1qBrtEBN",
        #         "origin_address": "rJhgs18yEFLLSnPa3CwviTo2UDkesdPoSQ",
        #         "destination_address": "rw9nf3WgsagJiZnkAeZzXZuqeCQ6LHm2h1",
        #         "amount": 0.1,
        #         "miner_fee": 0.000012,
        #         "miner_fee_type": "regular",
        #         "tax_index": 0,
        #         "tax_index_calculated": 0,
        #         "tax_amount": 0,
        #         "status": "pending",
        #         "create_date": "2019-01-25T16:37:15.443Z",
        #         "update_date": "2019-01-25T16:37:15.017Z",
        #         "transaction_id": null,
        #         "link": null,
        #         "tag": "0100000020"
        #     }
        #
        # fetchWithdrawals
        #
        #     {
        #         "amount": 5000,
        #         "code": "eY_ZNjWJ8",
        #         "create_date": "2022-08-31T18:19:59.312Z",
        #         "currency_code": "CREAL",
        #         "destination_address": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
        #         "is_internal": False,
        #         "link": null,
        #         "miner_fee": 0.1,
        #         "miner_fee_type": "regular",
        #         "network": "celo",
        #         "origin_address": "0x9e240434E845D7Bb2CE7218eD487687a6bC2E111",
        #         "status": "confirmed",
        #         "tax_amount": 0,
        #         "tax_index": 0,
        #         "tax_index_calculated": 0,
        #         "transaction_id": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        #         "update_date": "2022-08-31T19:01:01.420Z"
        #     }
        #
        # fetchDeposits
        #
        #     {
        #         "amount": 458.81,
        #         "code": "Zet_q-K42",
        #         "confirmation_date": "2022-08-02T11:25:32.457Z",
        #         "create_date": "2022-08-02T11:24:28.332Z",
        #         "currency_code": "CREAL",
        #         "hash": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        #         "is_internal": False,
        #         "network": "celo",
        #         "status": "confirmed"
        #     }
        #
        id = self.safe_string(transaction, 'code')
        amount = self.safe_number(transaction, 'amount')
        addressTo = self.safe_string(transaction, 'origin_address')
        addressFrom = self.safe_string(transaction, 'destination_address')
        txid = self.safe_string(transaction, 'transaction_id', 'hash')
        create_datetime = self.safe_string(transaction, 'create_date')
        update_datetime = self.safe_string_2(transaction, 'update_date', 'confirmation_date')
        currencyId = self.safe_string(transaction, 'currency_code')
        code = self.safe_currency_code(currencyId, currency)
        status = self.parse_transaction_status(self.safe_string(transaction, 'status'))
        network = self.safe_string(transaction, 'network')
        tag = self.safe_string(transaction, 'tag')
        feeCost = self.safe_number(transaction, 'miner_fee')
        fee = None
        if feeCost is not None:
            fee = {'currency': code, 'cost': feeCost}
        return {
            'info': transaction,
            'id': id,
            'currency': code,
            'amount': amount,
            'network': network,
            'address': None,
            'addressTo': addressTo,
            'addressFrom': addressFrom,
            'tag': tag,
            'tagTo': None,
            'tagFrom': None,
            'status': status,
            'type': None,
            'updated': self.parse8601(update_datetime),
            'txid': txid,
            'timestamp': self.parse8601(create_datetime),
            'datetime': create_datetime,
            'fee': fee,
        }

    async def fetch_my_trades(self, symbol=None, since=None, limit=None, params={}):
        """
        fetch all trades made by the user
        :param str|None symbol: unified market symbol
        :param int|None since: the earliest time in ms to fetch trades for
        :param int|None limit: the maximum number of trades structures to retrieve
        :param dict params: extra parameters specific to the bitcointrade api endpoint
        :returns [dict]: a list of `trade structures <https://docs.ccxt.com/en/latest/manual.html#trade-structure>`
        """
        await self.load_markets()
        request = {}
        market = None
        if symbol is not None:
            market = self.market(symbol)
            request['pair'] = market['id']
        if since is not None:
            request['start_date'] = since
        if limit is not None:
            request['page_size'] = limit
        response = await self.privateGetMarketTrades(self.extend(request, params))
        #
        #     {
        #         "data": {
        #             "pagination": {
        #                 "current_page": 1,
        #                 "page_size": 20,
        #                 "registers_count": 79,
        #                 "total_pages": 4
        #             },
        #             "trades": [
        #                 {
        #                     "amount": 0.000992,
        #                     "date": "2022-08-30T17:40:04.653Z",
        #                     "fee": 0,
        #                     "fee_currency": "BRL",
        #                     "pair_code": "BRLBTC",
        #                     "subtype": "mercado",
        #                     "total_price": 99,
        #                     "type": "venda",
        #                     "unit_price": 100681
        #                 }
        #             ]
        #         },
        #         "message": null
        #     }
        #
        data = self.safe_value(response, 'data', {})
        trades = self.safe_value(data, 'trades', [])
        return self.parse_trades(trades, market, since, limit)

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        request = '/' + self.version + '/' + self.implode_params(path, params)
        url = self.urls['api'][api] + request
        query = self.omit(params, self.extract_params(path))
        if api == 'public':
            if query:
                url += '?' + self.urlencode_with_array_repeat(query)
        elif api == 'private':
            self.check_required_credentials()
            headers = {
                'x-api-key': self.apiKey,
            }
            if (method == 'POST') or (method == 'DELETE'):
                body = self.json(query)
                headers['Content-Type'] = 'application/json'
            else:
                if query:
                    url += '?' + self.urlencode_with_array_repeat(query)
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if response is None:
            return
        if code != 200:
            message = self.safe_string(response, 'message')
            feedback = self.id + ' ' + body
            self.throw_broadly_matched_exception(self.exceptions['broad'], message, feedback)
            # No exceptions match, try to handle the HTTP status code.
            self.handle_http_status_code(code, reason, url, method, body)
            # No status code match either, raise generic exception.
            raise ExchangeError(feedback)
