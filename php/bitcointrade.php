<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import

class bitcointrade extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'bitcointrade',
            'name' => 'Bitcointrade',
            'countries' => array( 'BR' ), // Brazil
            // 1 request/second for unverified customers.
            'rateLimit' => 1000.0,
            'version' => 'v3',
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelOrder' => true,
                'createOrder' => true,
                'createReduceOnlyOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'fetchAccounts' => false,
                'fetchBalance' => true,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchBorrowRatesPerSymbol' => false,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDeposits' => true,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchOrderTrades' => true,
                'fetchPosition' => false,
                'fetchPositions' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactions' => false,
                'fetchWithdrawals' => true,
                'reduceMargin' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'transfer' => false,
                'withdraw' => true,
            ),
            'urls' => array(
                'logo' => 'https://cwstatic.nyc3.digitaloceanspaces.com/1996/bitcointrade.png',
                'api' => array(
                    'public' => 'https://api.bitcointrade.com.br',
                    'private' => 'https://api.bitcointrade.com.br',
                ),
                'www' => 'https://www.bitcointrade.com.br',
                'doc' => array(
                    'https://apidocs.bitcointrade.com.br',
                ),
                'fees' => 'https://www.bitcointrade.com.br/rates/',
                'referral' => 'https://www.bitcointrade.com.br/?s=ccxt',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        // Public
                        'public/{pair}/ticker' => 1,
                        'public/ticker' => 1,
                        'public/{pair}/orders' => 1,
                        'public/{pair}/trades' => 1,
                        'public/currencies' => 1,
                        'public/pairs' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        // Market
                        'market/user_orders/list' => 1,
                        'market/user_orders/open' => 1,
                        'market/user_orders/{code}' => 1,
                        'market/trades' => 1,
                        // Transfers
                        '{currency}/deposits' => 1,
                        '{currency}/withdraw' => 1,
                        // Wallets
                        'wallets/balance' => 1,
                        'wallets/{date}/balance' => 1,
                    ),
                    'post' => array(
                        // Market
                        'market/create_order' => 1,
                        // Transfers
                        '{currency}/withdraw' => 1,
                    ),
                    'delete' => array(
                        // Market
                        'market/user_orders' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.0050'),
                    'maker' => $this->parse_number('0.0025'),
                ),
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => false, // Needed to override Exchange.js's default 'true'.
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'broad' => array(
                    'Saldo insuficiente' => '\\ccxt\\InsufficientFunds',
                    'Par de moedas inválido' => '\\ccxt\\BadSymbol',
                    'Ordem inválida' => '\\ccxt\\OrderNotFound',
                    'Quantidade de ordem inválida' => '\\ccxt\\InvalidOrder',
                ),
            ),
            'httpExceptions' => array(
                '400' => '\\ccxt\\BadRequest', // Invalid parameters.
                '401' => '\\ccxt\\AuthenticationError',
                '402' => '\\ccxt\\AuthenticationError', // Revoked token.
                '403' => '\\ccxt\\PermissionDenied',
                '404' => '\\ccxt\\BadRequest', // Check request address.
                '405' => '\\ccxt\\ExchangeNotAvailable', // Try again.
                '429' => '\\ccxt\\RateLimitExceeded',
                '500' => '\\ccxt\\ExchangeError', // Try again.
                '502' => '\\ccxt\\ExchangeNotAvailable',
                '503' => '\\ccxt\\OnMaintenance',
            ),
            'options' => array(
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves $data on all markets for bitcointrade
         * @param {array} $params extra parameters specific to the exchange api endpoint
         * @return {[array]} an array of objects representing $market $data
         */
        $response = $this->publicGetPublicPairs ($params);
        //
        //     {
        //         "data":array(
        //             {
        //                 "base":"BTC",
        //                 "base_name":"Bitcoin",
        //                 "enabled":true,
        //                 "min_amount":0.00009662,
        //                 "min_value":10,
        //                 "price_tick":1,
        //                 "quote":"BRL",
        //                 "quote_name":"Brazilian real",
        //                 "symbol":"BRLBTC"
        //             }
        //         ),
        //         "message":null
        //     }
        //
        $result = array();
        $data = $this->safe_value($response, 'data', array());
        for ($i = 0; $i < count($data); $i++) {
            $market = $data[$i];
            $baseId = $this->safe_string($market, 'base');
            $quoteId = $this->safe_string($market, 'quote');
            $id = $this->safe_string($market, 'symbol');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $enabled = $this->safe_value($market, 'enabled');
            $result[] = array(
                'id' => $id,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => $enabled,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => null,
                    'price' => $this->safe_number($market, 'price_tick'),
                    'cost' => null,
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => $this->safe_number($market, 'min_amount'),
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $this->safe_number($market, 'min_value'),
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_currencies($params = array ()) {
        /**
         * fetches all available currencies on an exchange
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {array} an associative dictionary of currencies
         */
        $response = $this->publicGetPublicCurrencies ($params);
        //
        //     {
        //         "data" => array(
        //             {
        //                 "active" => true,
        //                 "code" => "BTC",
        //                 "min_withdraw_amount" => 0.001,
        //                 "name" => "Bitcoin",
        //                 "precision" => 8
        //             }
        //         ),
        //         "message" => null
        //     }
        //
        $result = array();
        $data = $this->safe_value($response, 'data', array());
        for ($i = 0; $i < count($data); $i++) {
            $currency = $data[$i];
            $currencyId = $this->safe_value($currency, 'code');
            $code = $this->safe_currency_code($currencyId);
            $result[$code] = array(
                'info' => $currency,
                'code' => $code,
                'id' => $currencyId,
                'name' => $this->safe_string($currency, 'name'),
                'active' => $this->safe_value($currency, 'active'),
                'deposit' => null,
                'withdraw' => null,
                'fee' => null,
                'precision' => $this->parse_number($this->parse_precision($this->safe_string($currency, 'precision'))),
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'networks' => null,
            );
        }
        return $result;
    }

    public function parse_ticker($ticker, $market = null) {
        //
        // Called by both fetchTicker and fetchTickers.
        //
        // {
        //     "buy":102500,
        //     "date":"2022-08-30T10:00:34.098Z",
        //     "high":103987,
        //     "last":103483,
        //     "low":100724,
        //     "pair" => "BRLBTC", // only available when requesting multiple tickers.
        //     "sell":103483,
        //     "trades_quantity":807,
        //     "volume":8.27278407
        // }
        //
        $datetime = $this->safe_string($ticker, 'date');
        $timestamp = $this->parse8601($datetime);
        $marketId = $this->safe_string($ticker, 'pair');
        $symbol = $this->safe_symbol($marketId, $market);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'high' => $this->safe_number($ticker, 'high'),
            'low' => $this->safe_number($ticker, 'low'),
            'bid' => $this->safe_string($ticker, 'buy'),
            'bidVolume' => null,
            'ask' => $this->safe_string($ticker, 'sell'),
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => null,
            'last' => $this->safe_number($ticker, 'last'),
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_number($ticker, 'volume'),
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {array} a {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structure}
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'pair' => $market['id'],
        );
        $response = $this->publicGetPublicPairTicker (array_merge($request, $params));
        //
        //     {
        //         "data" => array(
        //             "buy" => 103478,
        //             "date" => "2022-09-01T10:06:39.520Z",
        //             "high" => 106400,
        //             "last" => 103020,
        //             "low" => 103000,
        //             "sell" => 103999,
        //             "trades_quantity" => 856,
        //             "volume" => 12.08688889
        //         ),
        //         "message" => null
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_ticker($data, $market);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        /**
         * fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @param {[string]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market tickers are returned if not assigned
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {array} an array of {@link https://docs.ccxt.com/en/latest/manual.html#$ticker-structure $ticker structures}
         */
        $this->load_markets();
        $symbols = $this->market_symbols($symbols);
        $response = $this->publicGetPublicTicker ($params);
        //
        //     {
        //         "data" => array(
        //             {
        //                 "buy" => 103478,
        //                 "date" => "2022-09-01T10:06:39.520Z",
        //                 "high" => 106400,
        //                 "last" => 103020,
        //                 "low" => 103000,
        //                 "pair" => "BRLBTC",
        //                 "sell" => 103999,
        //                 "trades_quantity" => 856,
        //                 "volume" => 12.08688889
        //             }
        //         ),
        //         "message" => null
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($data); $i++) {
            $ticker = $this->parse_ticker($data[$i]);
            $symbol = $ticker['symbol'];
            $result[$symbol] = $ticker;
        }
        return $this->filter_by_array($result, 'symbol', $symbols);
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other $data
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int|null} $limit the maximum amount of order book entries to return
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {array} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'pair' => $market['id'],
        );
        if ($limit !== null) {
            $params['limit'] = $limit; // $limit in [1, 200].
        }
        $response = $this->publicGetPublicPairOrders (array_merge($request, $params));
        //
        //     {
        //         "data" => array(
        //             "asks" => array(
        //                 array("amount" => 0.421323, "code" => "kSR46XWXj", "unit_price" => 102499),
        //                 array("amount" => 0.030354, "code" => "U22MCtoNa", "unit_price" => 102500),
        //                 array("amount" => 0.056582, "code" => "uWc7LPB9C", "unit_price" => 103255)
        //             ),
        //             "bids" => array(
        //                 array("amount" => 0.019698, "code" => "cFfAKFfit", "unit_price" => 102000),
        //                 array("amount" => 0.024509, "code" => "eR7m5k4rd", "unit_price" => 102000),
        //                 array("amount" => 0.124996, "code" => "O7gTiVyjp", "unit_price" => 101867)
        //             )
        //         ),
        //         "message" => null
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_order_book($data, $symbol, null, 'bids', 'asks', 'unit_price', 'amount');
    }

    public function parse_trade_type($status) {
        $statuses = array(
            'buy' => 'buy',
            'sell' => 'buy',
            'compra' => 'compra',
            'venda' => 'venda',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_trade($trade, $market = null) {
        //
        // fetchTrades
        //
        //     {
        //         "active_order_code" => "BL-Xiv4hZ",
        //         "amount" => 0.006911,
        //         "date" => "2022-08-30T10:56:17.010Z",
        //         "passive_order_code" => "Lh766vBDT",
        //         "type" => "sell",
        //         "unit_price" => 102607
        //     }
        //
        // fetchOrderTrades
        //
        //      {
        //          "amount" => 0.2,
        //          "create_date" => "2020-02-21 20:49:37.450",
        //          "total_price" => 1000,
        //          "unit_price" => 5000
        //          "code" => "SkvtQoOZf",
        //          "type" => "buy",
        //          "subtype" => "limited",
        //          "pair" => "USDCBTC",
        //      }
        //
        // private fetchMyTrades
        //
        //      {
        //          "amount" => 0.000992,
        //          "date" => "2022-08-30T17:40:04.653Z",
        //          "fee" => 0,
        //          "fee_currency" => "BRL",
        //          "pair_code" => "BRLBTC",
        //          "subtype" => "mercado",
        //          "total_price" => 99,
        //          "type" => "venda",
        //          "unit_price" => 100681
        //      }
        //
        $datetime = $this->safe_string($trade, 'date');
        $timestamp = $this->parse8601($datetime);
        $priceString = $this->safe_string($trade, 'unit_price');
        $orderId = $this->safe_string($trade, 'code');
        $side = $this->safe_string_lower($trade, 'side');
        $marketId = $this->safe_string_2($trade, 'pair', 'pair_code');
        $symbol = $this->safe_symbol($marketId, $market);
        $type = $this->parse_trade_type($this->safe_string($trade, 'type'));
        $amountString = $this->safe_string($trade, 'amount');
        $costString = $this->safe_string($trade, 'total_price');
        $feeString = $this->safe_string($trade, 'fee');
        $fee = null;
        if ($feeString !== null) {
            $feeCurrencyId = $this->safe_string($trade, 'feeCurrency');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $this->safe_string($trade, 'feeAmount'),
                'currency' => $feeCurrencyCode,
            );
        }
        return $this->safe_trade(array(
            'id' => null,
            'order' => $orderId,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $costString,
            'takerOrMaker' => null,
            'fee' => $fee,
            'info' => $trade,
        ), $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        /**
         * get the list of most recent $trades for a particular $symbol
         * @param {string} $symbol unified $symbol of the $market to fetch $trades for
         * @param {int|null} $since timestamp in ms of the earliest trade to fetch
         * @param {int|null} $limit the maximum amount of $trades to fetch
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {[array]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-$trades trade structures~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'pair' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100
        }
        $response = $this->publicGetPublicPairTrades (array_merge($request, $params));
        //
        //    {
        //        "data" => {
        //            "pagination" => array(
        //                "current_page" => 1,
        //                "page_size" => 20,
        //                "registers_count" => 3181802,
        //                "total_pages" => 159091
        //            ),
        //            "trades" => array(
        //                array(
        //                    "active_order_code" => "BL-Xiv4hZ",
        //                    "amount" => 0.006911,
        //                    "date" => "2022-08-30T10:56:17.010Z",
        //                    "passive_order_code" => "Lh766vBDT",
        //                    "type" => "sell",
        //                    "unit_price" => 102607
        //                }
        //            )
        //        ),
        //        "message" => null
        //    }
        //
        $data = $this->safe_value($response, 'data', array());
        $trades = $this->safe_value($data, 'trades', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function parse_balance($response) {
        $data = $this->safe_value($response, 'data', array());
        $result = array(
            'info' => $response,
            'timestamp' => null,
            'datetime' => null,
        );
        for ($i = 0; $i < count($data); $i++) {
            $balance = $data[$i];
            $currencyId = $this->safe_string($balance, 'currency_code');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_number($balance, 'available_amount');
            $account['used'] = $this->safe_number($balance, 'locked_amount');
            $account['total'] = $account['free'] . $account['used'];
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {array} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
         */
        $this->load_markets();
        $response = $this->privateGetWalletsBalance ($params);
        //
        //     {
        //         "data" => array(
        //             array(
        //                 "address" => null,
        //                 "available_amount" => 1298.82,
        //                 "currency_code" => "BRL",
        //                 "last_update" => "2022-08-30T17:41:56.936Z",
        //                 "locked_amount" => 239.54,
        //                 "memo" => null,
        //                 "supported_networks_for_deposit" => array(),
        //                 "tag" => null
        //             ),
        //             {
        //                 "address" => "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
        //                 "available_amount" => 0,
        //                 "currency_code" => "BTC",
        //                 "last_update" => "2022-08-30T17:42:04.523Z",
        //                 "locked_amount" => 0,
        //                 "memo" => null,
        //                 "supported_networks_for_deposit" => array(
        //                     "bitcoin"
        //                 ),
        //                 "tag" => null
        //             }
        //         ),
        //         "message" => null
        //     }
        //
        return $this->parse_balance($response);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        /**
         * create a trade order
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of currency you want to trade in units of base currency
         * @param {float|null} $price the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {array} an {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $orderSubType = 'limited';
        if ($type === 'market') {
            $orderSubType = 'market';
        }
        // amountToPrecision is not used as there's no $amount precision
        // information in the markets. The base currency precision could be
        // be used instead, but Bitcointrade has lower precision on some pairs
        // than on their base currency.
        // Amounts with a higher precision than what is supported by a pair
        // is silently truncated by Bitcointrade.
        $request = array(
            'amount' => $amount,
            'subtype' => $orderSubType,
            'type' => $side,
            'pair' => $market['id'],
        );
        // Even though the documentation states that 'unit_price' is always
        // required, Bitcointrade accepts $market orders without a $price->
        if ($type === 'limit') {
            $request['unit_price'] = $this->price_to_precision($symbol, $price);
        }
        $response = $this->privatePostMarketCreateOrder (array_merge($request, $params));
        //
        //     {
        //         "data" => array(
        //             "code" => "F2ZJW7wqi",
        //         ),
        //         "message" => null
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_order($data, $market);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        /**
         * cancels an open order
         * @param {string} $id order $id
         * @param {string|null} $symbol not used by bitcointrade cancelOrder ()
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {array} An {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
         */
        $this->load_markets();
        $request = array(
            'code' => $id,
        );
        $response = $this->privateDeleteMarketUserOrders (array_merge($request, $params));
        //
        //     {
        //         "data" => array(
        //             "code" => "F2ZJW7wqi",
        //             "create_date" => "2022-08-30T17:40:04.637Z",
        //             "executed_amount" => 0.000992,
        //             "pair" => "BRLBTC",
        //             "remaining_amount" => 0,
        //             "remaining_price" => 0,
        //             "requested_amount" => 0.000992,
        //             "status" => "executed_completely",
        //             "subtype" => "market",
        //             "total_price" => 99,
        //             "type" => "sell",
        //             "unit_price" => 99798.38709677,
        //             "update_date" => "2022-08-30T17:40:04.657Z"
        //         ),
        //         "message" => null
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_order($data);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        /**
         * fetches information on an order made by the user
         * @param {string|null} $symbol not used by bitcointrade fetchOrder
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {array} An {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
         */
        $this->load_markets();
        $request = array(
            'code' => $id,
        );
        $response = $this->privateGetMarketUserOrdersCode (array_merge($request, $params));
        //
        //     {
        //         "data" => {
        //             "code" => "SkvtQoOZf",
        //             "type" => "buy",
        //             "subtype" => "limited",
        //             "requested_amount" => 0.02347418,
        //             "remaining_amount" => 0,
        //             "unit_price" => 42600,
        //             "status" => "executed_completely",
        //             "create_date" => "2017-12-08T23:42:54.960Z",
        //             "update_date" => "2017-12-13T21:48:48.817Z",
        //             "pair" => "USDCBTC",
        //             "total_price" => 1000,
        //             "executed_amount" => 0.02347418,
        //             "remaining_price" => 0,
        //             "transactions" => array(
        //                 array(
        //                     "amount" => 0.2,
        //                     "create_date" => "2020-02-21 20:24:43.433",
        //                     "total_price" => 1000,
        //                     "unit_price" => 5000
        //                 ),
        //                 array(
        //                     "amount" => 0.2,
        //                     "create_date" => "2020-02-21 20:49:37.450",
        //                     "total_price" => 1000,
        //                     "unit_price" => 5000
        //                 }
        //             )
        //         ),
        //         "message" => null
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_order($data);
    }

    public function fetch_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetches information on multiple $orders made by the user
         * @param {string|null} $symbol unified $market $symbol of the $market $orders were made in
         * @param {int|null} $since the earliest time in ms to fetch $orders for
         * @param {int|null} $limit the maximum number of  orde structures to retrieve
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structures}
         */
        $this->load_markets();
        $request = array();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['pair'] = $market['id'];
        }
        if ($since !== null) {
            $request['start_date'] = $since;
        }
        if ($limit !== null) {
            $request['page_size'] = $limit;
        }
        $response = $this->privateGetMarketUserOrdersList (array_merge($request, $params));
        //
        //     {
        //         "data" => {
        //             "orders" => array(
        //                 {
        //                     "code" => "F2ZJW7wqi",
        //                     "create_date" => "2022-08-30T17:40:04.637Z",
        //                     "executed_amount" => 0.000992,
        //                     "pair" => "BRLBTC",
        //                     "remaining_amount" => 0,
        //                     "remaining_price" => 0,
        //                     "requested_amount" => 0.000992,
        //                     "status" => "executed_completely",
        //                     "subtype" => "market",
        //                     "total_price" => 99,
        //                     "type" => "sell",
        //                     "unit_price" => 99798.38709677,
        //                     "update_date" => "2022-08-30T17:40:04.657Z"
        //                 }
        //             ),
        //             "pagination" => array(
        //                 "current_page" => 1,
        //                 "page_size" => 20,
        //                 "registers_count" => 1,
        //                 "total_pages" => 1
        //             }
        //         ),
        //         "message" => null
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $orders = $this->safe_value($data, 'orders', array());
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all unfilled currently open $orders
         * @param {string|null} $symbol unified $market $symbol
         * @param {int|null} $since the earliest time in ms to fetch open $orders for
         * @param {int|null} $limit the maximum number of  open $orders structures to retrieve
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structures}
         */
        $this->load_markets();
        $request = array();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['pair'] = $market['id'];
        }
        if ($since !== null) {
            $request['start_date'] = $since;
        }
        if ($limit !== null) {
            $request['page_size'] = $limit;
        }
        $response = $this->privateGetMarketUserOrdersOpen (array_merge($request, $params));
        //
        //     {
        //         "data" => {
        //             "orders" => array(
        //                 {
        //                     "code" => "F2ZJW7wqi",
        //                     "create_date" => "2022-08-30T17:40:04.637Z",
        //                     "executed_amount" => 0.000992,
        //                     "pair" => "BRLBTC",
        //                     "remaining_amount" => 0,
        //                     "remaining_price" => 0,
        //                     "requested_amount" => 0.000992,
        //                     "status" => "executed_completely",
        //                     "subtype" => "market",
        //                     "total_price" => 99,
        //                     "type" => "sell",
        //                     "unit_price" => 99798.38709677,
        //                     "update_date" => "2022-08-30T17:40:04.657Z"
        //                 }
        //             ),
        //             "pagination" => array(
        //                 "current_page" => 1,
        //                 "page_size" => 20,
        //                 "registers_count" => 57,
        //                 "total_pages" => 3
        //             }
        //         ),
        //         "message" => null
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $orders = $this->safe_value($data, 'orders', array());
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetches information on multiple closed orders made by the user
         * @param {string|null} $symbol unified market $symbol of the market orders were made in
         * @param {int|null} $since the earliest time in ms to fetch orders for
         * @param {int|null} $limit the maximum number of  orde structures to retrieve
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structures}
         */
        $request = array(
            'status' => array( 'executed_completely', 'canceled' ),
        );
        return $this->fetch_orders($symbol, $since, $limit, array_merge($request, $params));
    }

    public function fetch_order_trades($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all the trades made from a single order
         * @param {string} $id order $id
         * @param {string|null} $symbol unified $market $symbol
         * @param {int|null} $since the earliest time in ms to fetch trades for
         * @param {int|null} $limit the maximum number of trades to retrieve
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#trade-structure trade structures}
         */
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array(
            'code' => $id,
        );
        $response = $this->privateGetOrdersFill (array_merge($request, $params));
        //
        //     {
        //         "data" => {
        //             "code" => "SkvtQoOZf",
        //             "type" => "buy",
        //             "subtype" => "limited",
        //             "requested_amount" => 0.02347418,
        //             "remaining_amount" => 0,
        //             "unit_price" => 42600,
        //             "status" => "executed_completely",
        //             "create_date" => "2017-12-08T23:42:54.960Z",
        //             "update_date" => "2017-12-13T21:48:48.817Z",
        //             "pair" => "USDCBTC",
        //             "total_price" => 1000,
        //             "executed_amount" => 0.02347418,
        //             "remaining_price" => 0,
        //             "transactions" => array(
        //                 array(
        //                     "amount" => 0.2,
        //                     "create_date" => "2020-02-21 20:24:43.433",
        //                     "total_price" => 1000,
        //                     "unit_price" => 5000
        //                 ),
        //                 array(
        //                     "amount" => 0.2,
        //                     "create_date" => "2020-02-21 20:49:37.450",
        //                     "total_price" => 1000,
        //                     "unit_price" => 5000
        //                 }
        //             )
        //         ),
        //         "message" => null
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $transactions = $this->safe_value($data, 'transactions', array());
        // Since a transaction, as returned, only has amount, price and time,
        // the other relevant fields are copied from the order.
        $baseTransaction = array(
            'code' => $this->safe_string($data, 'code'),
            'type' => $this->safe_string($data, 'type'),
            'subtype' => $this->safe_string($data, 'subtype'),
            'pair' => $this->safe_string($data, 'pair'),
        );
        $extendedTransactions = array();
        for ($i = 0; $i < count($transactions); $i++) {
            $extendedTransactions[] = array_merge($transactions[$i], $baseTransaction);
        }
        return $this->parse_trades($extendedTransactions, $market, $since, $limit);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'executed_completely' => 'closed',
            'executed_partially' => 'open',
            'waiting' => 'open',
            'canceled' => 'canceled',
            'pending_creation' => 'open',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //
        // cancelOrder, fetchOrders, fetchOrder
        //
        //     {
        //         "code" => "F2ZJW7wqi",
        //         "create_date" => "2022-08-30T17:40:04.637Z",
        //         "executed_amount" => 0.000992,
        //         "pair" => "BRLBTC",
        //         "remaining_amount" => 0,
        //         "remaining_price" => 0,
        //         "requested_amount" => 0.000992,
        //         "status" => "executed_completely",
        //         "subtype" => "market",
        //         "total_price" => 99,
        //         "type" => "sell",
        //         "unit_price" => 99798.38709677,
        //         "update_date" => "2022-08-30T17:40:04.657Z"
        //     }
        //
        // createOrder
        //
        //     {
        //         "code" => "F2ZJW7wqi",
        //     }
        //
        $id = $this->safe_string($order, 'code');
        $amount = $this->safe_string($order, 'requested_amount');
        $price = $this->safe_string($order, 'unit_price');
        $cost = $this->safe_number($order, 'total_price');
        $type = $this->safe_string_lower($order, 'subtype');
        $side = $this->safe_string_lower($order, 'type');
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $datetime = $this->safe_string($order, 'create_date');
        $timestamp = $this->parse8601($datetime);
        $filled = $this->safe_number($order, 'executed_amount');
        $marketId = $this->safe_string($order, 'pair');
        $symbol = $this->safe_symbol($marketId, $market);
        $stopPrice = $this->safe_number($order, 'stopPrice');
        return $this->safe_order(array(
            'id' => $id,
            'clientOrderId' => null,
            'info' => $order,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => $stopPrice,
            'amount' => $amount,
            'cost' => $cost,
            'average' => null,
            'filled' => $filled,
            'remaining' => null,
            'status' => $status,
            'fee' => null,
            'trades' => null,
        ), $market);
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        /**
         * make a withdrawal
         * @param {string} $code unified $currency $code
         * @param {float} $amount the $amount to withdraw
         * @param {string} $address the $address to withdraw to
         * @param {string|null} $tag
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {array} a {@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure transaction structure}
         */
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->load_markets();
        $currency = $this->currency($code);
        $feeType = $this->safe_string($params, 'fee_type', 'regular');
        $request = array(
            'currency' => $currency['id'],
            'fee_type' => $feeType,
            'amount' => $this->currency_to_precision($code, $amount),
            'destination' => $address,
        );
        if ($tag !== null) {
            $request['tag'] = $tag;
        }
        $memo = $this->safe_string($params, 'memo');
        if ($memo !== null) {
            $request['memo'] = $memo;
        }
        $response = $this->privatePostCurrencyWithdraw (array_merge($request, $params));
        //
        //     {
        //         "data" => array(
        //             "code" => "B1qBrtEBN",
        //             "origin_address" => "rJhgs18yEFLLSnPa3CwviTo2UDkesdPoSQ",
        //             "destination_address" => "rw9nf3WgsagJiZnkAeZzXZuqeCQ6LHm2h1",
        //             "amount" => 0.1,
        //             "miner_fee" => 0.000012,
        //             "miner_fee_type" => "regular",
        //             "tax_index" => 0,
        //             "tax_index_calculated" => 0,
        //             "tax_amount" => 0,
        //             "status" => "pending",
        //             "create_date" => "2019-01-25T16:37:15.443Z",
        //             "update_date" => "2019-01-25T16:37:15.017Z",
        //             "transaction_id" => null,
        //             "link" => null,
        //             "tag" => "0100000020"
        //         ),
        //         "message" => null
        //     }
        //
        return $this->parse_transaction($response, $currency);
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all $deposits made to an account
         * @param {string|null} $code unified $currency $code
         * @param {int|null} $since the earliest time in ms to fetch $deposits for
         * @param {int|null} $limit the maximum number of $deposits structures to retrieve
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure transaction structures}
         */
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($since !== null) {
            $request['start_date'] = $since;
        }
        if ($limit !== null) {
            $request['page_size'] = $limit;
        }
        $response = $this->privateGetCurrencyDeposits (array_merge($request, $params));
        //     {
        //         "data" => {
        //             "deposits" => array(
        //                 {
        //                     "amount" => 458.81,
        //                     "code" => "Zet_q-K42",
        //                     "confirmation_date" => "2022-08-02T11:25:32.457Z",
        //                     "create_date" => "2022-08-02T11:24:28.332Z",
        //                     "currency_code" => "CREAL",
        //                     "hash" => "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        //                     "is_internal" => false,
        //                     "network" => "celo",
        //                     "status" => "confirmed"
        //                 }
        //             ),
        //             "pagination" => array(
        //                 "current_page" => 1,
        //                 "page_size" => 20,
        //                 "registers_count" => 1,
        //                 "total_pages" => 1
        //             }
        //         ),
        //         "message" => null
        //     }
        $data = $this->safe_value($response, 'data');
        $deposits = $this->safe_value($data, 'deposits');
        return $this->parse_transactions($deposits, $currency, $since, $limit, array( 'type' => 'deposit' ));
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all $withdrawals made from an account
         * @param {string|null} $code unified $currency $code
         * @param {int|null} $since the earliest time in ms to fetch $withdrawals for
         * @param {int|null} $limit the maximum number of $withdrawals structures to retrieve
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure transaction structures}
         */
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($since !== null) {
            $request['start_date'] = $since;
        }
        if ($limit !== null) {
            $request['page_size'] = $limit;
        }
        $response = $this->privateGetCurrencyWithdraw (array_merge($request, $params));
        //     {
        //         "data" => {
        //             "pagination" => array(
        //                 "current_page" => 1,
        //                 "page_size" => 20,
        //                 "registers_count" => 1,
        //                 "total_pages" => 1
        //             ),
        //             "withdrawals" => array(
        //                 array(
        //                     "amount" => 5000,
        //                     "code" => "eY_ZNjWJ8",
        //                     "create_date" => "2022-08-31T18:19:59.312Z",
        //                     "currency_code" => "CREAL",
        //                     "destination_address" => "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
        //                     "is_internal" => false,
        //                     "link" => null,
        //                     "miner_fee" => 0.1,
        //                     "miner_fee_type" => "regular",
        //                     "network" => "celo",
        //                     "origin_address" => "0x9e240434E845D7Bb2CE7218eD487687a6bC2E111",
        //                     "status" => "confirmed",
        //                     "tax_amount" => 0,
        //                     "tax_index" => 0,
        //                     "tax_index_calculated" => 0,
        //                     "transaction_id" => "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        //                     "update_date" => "2022-08-31T19:01:01.420Z"
        //                 }
        //             )
        //         ),
        //         "message" => null
        //     }
        $data = $this->safe_value($response, 'data');
        $withdrawals = $this->safe_value($data, 'withdrawals');
        return $this->parse_transactions($withdrawals, $currency, $since, $limit, array( 'type' => 'withdrawal' ));
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'pending' => 'pending',
            'confirmed' => 'ok',
            'canceled' => 'failed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // withdraw
        //
        //     {
        //         "code" => "B1qBrtEBN",
        //         "origin_address" => "rJhgs18yEFLLSnPa3CwviTo2UDkesdPoSQ",
        //         "destination_address" => "rw9nf3WgsagJiZnkAeZzXZuqeCQ6LHm2h1",
        //         "amount" => 0.1,
        //         "miner_fee" => 0.000012,
        //         "miner_fee_type" => "regular",
        //         "tax_index" => 0,
        //         "tax_index_calculated" => 0,
        //         "tax_amount" => 0,
        //         "status" => "pending",
        //         "create_date" => "2019-01-25T16:37:15.443Z",
        //         "update_date" => "2019-01-25T16:37:15.017Z",
        //         "transaction_id" => null,
        //         "link" => null,
        //         "tag" => "0100000020"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "amount" => 5000,
        //         "code" => "eY_ZNjWJ8",
        //         "create_date" => "2022-08-31T18:19:59.312Z",
        //         "currency_code" => "CREAL",
        //         "destination_address" => "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
        //         "is_internal" => false,
        //         "link" => null,
        //         "miner_fee" => 0.1,
        //         "miner_fee_type" => "regular",
        //         "network" => "celo",
        //         "origin_address" => "0x9e240434E845D7Bb2CE7218eD487687a6bC2E111",
        //         "status" => "confirmed",
        //         "tax_amount" => 0,
        //         "tax_index" => 0,
        //         "tax_index_calculated" => 0,
        //         "transaction_id" => "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        //         "update_date" => "2022-08-31T19:01:01.420Z"
        //     }
        //
        // fetchDeposits
        //
        //     {
        //         "amount" => 458.81,
        //         "code" => "Zet_q-K42",
        //         "confirmation_date" => "2022-08-02T11:25:32.457Z",
        //         "create_date" => "2022-08-02T11:24:28.332Z",
        //         "currency_code" => "CREAL",
        //         "hash" => "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        //         "is_internal" => false,
        //         "network" => "celo",
        //         "status" => "confirmed"
        //     }
        //
        $id = $this->safe_string($transaction, 'code');
        $amount = $this->safe_number($transaction, 'amount');
        $addressTo = $this->safe_string($transaction, 'origin_address');
        $addressFrom = $this->safe_string($transaction, 'destination_address');
        $txid = $this->safe_string($transaction, 'transaction_id', 'hash');
        $create_datetime = $this->safe_string($transaction, 'create_date');
        $update_datetime = $this->safe_string_2($transaction, 'update_date', 'confirmation_date');
        $currencyId = $this->safe_string($transaction, 'currency_code');
        $code = $this->safe_currency_code($currencyId, $currency);
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        $network = $this->safe_string($transaction, 'network');
        $tag = $this->safe_string($transaction, 'tag');
        $feeCost = $this->safe_number($transaction, 'miner_fee');
        $fee = null;
        if ($feeCost !== null) {
            $fee = array( 'currency' => $code, 'cost' => $feeCost );
        }
        return array(
            'info' => $transaction,
            'id' => $id,
            'currency' => $code,
            'amount' => $amount,
            'network' => $network,
            'address' => null,
            'addressTo' => $addressTo,
            'addressFrom' => $addressFrom,
            'tag' => $tag,
            'tagTo' => null,
            'tagFrom' => null,
            'status' => $status,
            'type' => null,
            'updated' => $this->parse8601($update_datetime),
            'txid' => $txid,
            'timestamp' => $this->parse8601($create_datetime),
            'datetime' => $create_datetime,
            'fee' => $fee,
        );
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all $trades made by the user
         * @param {string|null} $symbol unified $market $symbol
         * @param {int|null} $since the earliest time in ms to fetch $trades for
         * @param {int|null} $limit the maximum number of $trades structures to retrieve
         * @param {array} $params extra parameters specific to the bitcointrade api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#trade-structure trade structures}
         */
        $this->load_markets();
        $request = array();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['pair'] = $market['id'];
        }
        if ($since !== null) {
            $request['start_date'] = $since;
        }
        if ($limit !== null) {
            $request['page_size'] = $limit;
        }
        $response = $this->privateGetMarketTrades (array_merge($request, $params));
        //
        //     {
        //         "data" => {
        //             "pagination" => array(
        //                 "current_page" => 1,
        //                 "page_size" => 20,
        //                 "registers_count" => 79,
        //                 "total_pages" => 4
        //             ),
        //             "trades" => array(
        //                 array(
        //                     "amount" => 0.000992,
        //                     "date" => "2022-08-30T17:40:04.653Z",
        //                     "fee" => 0,
        //                     "fee_currency" => "BRL",
        //                     "pair_code" => "BRLBTC",
        //                     "subtype" => "mercado",
        //                     "total_price" => 99,
        //                     "type" => "venda",
        //                     "unit_price" => 100681
        //                 }
        //             )
        //         ),
        //         "message" => null
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $trades = $this->safe_value($data, 'trades', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $request = '/' . $this->version . '/' . $this->implode_params($path, $params);
        $url = $this->urls['api'][$api] . $request;
        $query = $this->omit($params, $this->extract_params($path));
        if ($api === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode_with_array_repeat($query);
            }
        } elseif ($api === 'private') {
            $this->check_required_credentials();
            $headers = array(
                'x-$api-key' => $this->apiKey,
            );
            if (($method === 'POST') || ($method === 'DELETE')) {
                $body = $this->json($query);
                $headers['Content-Type'] = 'application/json';
            } else {
                if ($query) {
                    $url .= '?' . $this->urlencode_with_array_repeat($query);
                }
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return;
        }
        if ($code !== 200) {
            $message = $this->safe_string($response, 'message');
            $feedback = $this->id . ' ' . $body;
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            // No exceptions match, try to handle the HTTP status $code->
            $this->handle_http_status_code($code, $reason, $url, $method, $body);
            // No status $code match either, raise generic exception.
            throw new ExchangeError($feedback);
        }
    }
}
